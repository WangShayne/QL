From: <Saved by Blink>
Subject: Chart.js | Documentation
Date: Tue, 23 May 2016 02:03:19 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_A5D4_DD21373C.1D322944"

------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.chartjs.org/docs/

<!DOCTYPE html><html class=3D"wf-proximanova-n3-active wf-proximanovasoft-n=
4-active wf-proximanovasoft-n6-active wf-active"><head><meta charset=3D"GBK=
">
		<title>Chart.js | Documentation</title>
	=09
<link rel=3D"stylesheet" href=3D"https://use.typekit.net/c/b077f1/1w;proxim=
a-nova,7ceb210e49ade74e23101e10f006f110a0b6588c7c57777a6e3d98a38b749696,2cl=
zC9:W:n3;proxima-nova-soft,7ceb210e49ade74e23101e10f006f110a0b6588c7c57777a=
6e3d98a38b749696,gDX:W:n4,gDZ:W:n6/l" media=3D"all">

	=09
		<link rel=3D"icon" href=3D"http://www.chartjs.org/favicon.ico">
		<link rel=3D"stylesheet" type=3D"text/css" href=3D"http://www.chartjs.org=
/styles.css">
	=09
	</head>

=09

=09

	<body class=3D"sidebar-padded">
		<nav class=3D"sidebar">
		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#getting-started">Getting started=
</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#getting-started-download-chart=
-js">Download Chart.js</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#getting-started-installation">=
Installation</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#getting-started-creating-a-cha=
rt">Creating a Chart</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#getting-started-global-chart-c=
onfiguration">Global chart configuration</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#getting-started-colors">Colors=
</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#line-chart">Line Chart</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-introduction">Intro=
duction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-example-usage">Exam=
ple usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-data-structure">Dat=
a structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#line-chart-chart-options">Char=
t options</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#bar-chart">Bar Chart</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bar-chart-introduction">Introd=
uction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bar-chart-example-usage">Examp=
le usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bar-chart-data-structure">Data=
 structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#bar-chart-chart-options">Chart=
 Options</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#radar-chart">Radar Chart</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#radar-chart-introduction">Intr=
oduction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#radar-chart-example-usage">Exa=
mple usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#radar-chart-data-structure">Da=
ta structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#radar-chart-chart-options">Cha=
rt Options</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#polar-area-chart">Polar Area Cha=
rt</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#polar-area-chart-introduction"=
>Introduction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#polar-area-chart-example-usage=
">Example usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#polar-area-chart-data-structur=
e">Data structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#polar-area-chart-chart-options=
">Chart options</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#doughnut-pie-chart">Pie &amp; Do=
ughnut Charts</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-introductio=
n">Introduction</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-example-usa=
ge">Example usage</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-data-struct=
ure">Data structure</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-chart-optio=
ns">Chart options</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#scales">Scales</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-category-scale">Categor=
y Scale</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-linear-scale">Linear Sc=
ale</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-logarithmic-scale">Loga=
rithmic Scale</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-time-scale">Time Scale<=
/a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#scales-radial-linear-scale">Ra=
dial Linear Scale</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#advanced-usage">Advanced usage</=
a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-prototype-metho=
ds">Prototype methods</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-external-toolti=
ps">External Tooltips</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-writing-new-sca=
le-types">Writing new scale types</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-writing-new-cha=
rt-types">Writing new chart types</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-extending-exist=
ing-chart-types">Extending existing chart types</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-creating-plugin=
s">Creating Plugins</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#advanced-usage-building-chart-=
js">Building Chart.js</a></li>
		=09
		</ul>
	</div>

		=09
			=09
	<div class=3D"sidebar-section">
		<h4 class=3D"section-link">
			<a href=3D"http://www.chartjs.org/docs/#notes">Notes</a>
		</h4>
		<ul class=3D"section-sublinks">
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#notes-previous-versions">Previ=
ous versions</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#notes-browser-support">Browser=
 support</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#notes-bugs-amp-issues">Bugs &a=
mp; issues</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#notes-contributing">Contributi=
ng</a></li>
		=09
				<li>
					<a href=3D"http://www.chartjs.org/docs/#notes-license">License</a></li=
>
		=09
		</ul>
	</div>

		=09
		</nav>

		<div class=3D"documentation-header">
			<img class=3D"chart-logo" src=3D"http://www.chartjs.org/img/chartjs-logo=
.svg">
			<div class=3D"documentation-title-wrapper">
				<h1 class=3D"hero-title">Chart.js</h1>
				<h2 class=3D"hero-subtitle">API Documentation</h2>
			</div>
		</div>
		<div class=3D"documentation-body">
		=09
			=09
	<section id=3D"getting-started">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#getting-=
started">Getting started</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"getting-started-download-chart-js"><a class=3D"fragment-link" =
href=3D"http://www.chartjs.org/docs/#getting-started-download-chart-js">Dow=
nload Chart.js</a></h3><p>To download a zip, go to <a href=3D"https://githu=
b.com/nnnick/Chart.js" target=3D"_blank">Chart.js on Github</a> and choose =
the version that is right for your application.</p>
<ul>
<li><a href=3D"https://raw.githubusercontent.com/nnnick/Chart.js/v2.0-dev/d=
ist/Chart.js" target=3D"_blank">Standard build</a> (~31kB gzipped)</li>
<li><a href=3D"https://raw.githubusercontent.com/nnnick/Chart.js/v2.0-dev/d=
ist/Chart.bundle.js" target=3D"_blank">Bundled with Moment.js</a> (~45kB gz=
ipped)</li>
<li><a href=3D"https://cdnjs.com/libraries/Chart.js" target=3D"_blank">CDN =
Versions</a></li>
</ul>
<p>To install via npm / bower:</p>
<pre><code class=3D"lang-bash">npm install chart.js --save
</code></pre>
<pre><code class=3D"lang-bash">bower install Chart.js --save
</code></pre>
<h3 id=3D"getting-started-installation"><a class=3D"fragment-link" href=3D"=
http://www.chartjs.org/docs/#getting-started-installation">Installation</a>=
</h3><p>To import Chart.js using an old-school script tag:</p>
<pre><code class=3D"lang-html"><span class=3D"hljs-tag">&lt;<span class=3D"=
hljs-name">script</span> <span class=3D"hljs-attr">src</span>=3D<span class=
=3D"hljs-string">"Chart.js"</span>&gt;</span><span class=3D"undefined"></sp=
an><span class=3D"hljs-tag">&lt;/<span class=3D"hljs-name">script</span>&gt=
;</span>
<span class=3D"hljs-tag">&lt;<span class=3D"hljs-name">script</span>&gt;</s=
pan><span class=3D"actionscript">
    <span class=3D"hljs-keyword">var</span> myChart =3D <span class=3D"hljs=
-keyword">new</span> Chart({...})
</span><span class=3D"hljs-tag">&lt;/<span class=3D"hljs-name">script</span=
>&gt;</span>
</code></pre>
<p>To import Chart.js using an awesome module loader:</p>
<pre><code class=3D"lang-javascript">
<span class=3D"hljs-comment">// Using CommonJS</span>
<span class=3D"hljs-keyword">var</span> Chart =3D <span class=3D"hljs-built=
_in">require</span>(<span class=3D"hljs-string">'src/chart.js'</span>)
<span class=3D"hljs-keyword">var</span> myChart =3D <span class=3D"hljs-key=
word">new</span> Chart({...})

<span class=3D"hljs-comment">// ES6</span>
<span class=3D"hljs-keyword">import</span> Chart <span class=3D"hljs-keywor=
d">from</span> <span class=3D"hljs-string">'src/chart.js'</span>
<span class=3D"hljs-keyword">let</span> myChart =3D <span class=3D"hljs-key=
word">new</span> Chart({...})

<span class=3D"hljs-comment">// Using requirejs</span>
<span class=3D"hljs-built_in">require</span>([<span class=3D"hljs-string">'=
path/to/Chartjs'</span>], <span class=3D"hljs-function"><span class=3D"hljs=
-keyword">function</span>(<span class=3D"hljs-params">Chart</span>)</span>{
 <span class=3D"hljs-keyword">var</span> myChart =3D <span class=3D"hljs-ke=
yword">new</span> Chart({...})
})
</code></pre>
<h3 id=3D"getting-started-creating-a-chart"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#getting-started-creating-a-chart">Creating=
 a Chart</a></h3><p>To create a chart, we need to instantiate the <code>Cha=
rt</code> class. To do this, we need to pass in the node, jQuery instance, =
or 2d context of the canvas of where we want to draw the chart. Here's an e=
xample.</p>
<pre><code class=3D"lang-html"><span class=3D"hljs-tag">&lt;<span class=3D"=
hljs-name">canvas</span> <span class=3D"hljs-attr">id</span>=3D<span class=
=3D"hljs-string">"myChart"</span> <span class=3D"hljs-attr">width</span>=3D=
<span class=3D"hljs-string">"400"</span> <span class=3D"hljs-attr">height</=
span>=3D<span class=3D"hljs-string">"400"</span>&gt;</span><span class=3D"h=
ljs-tag">&lt;/<span class=3D"hljs-name">canvas</span>&gt;</span>
</code></pre>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Any of=
 the following formats may be used</span>
<span class=3D"hljs-keyword">var</span> ctx =3D <span class=3D"hljs-built_i=
n">document</span>.getElementById(<span class=3D"hljs-string">"myChart"</sp=
an>);
<span class=3D"hljs-keyword">var</span> ctx =3D <span class=3D"hljs-built_i=
n">document</span>.getElementById(<span class=3D"hljs-string">"myChart"</sp=
an>).getContext(<span class=3D"hljs-string">"2d"</span>);
<span class=3D"hljs-keyword">var</span> ctx =3D $(<span class=3D"hljs-strin=
g">"#myChart"</span>);
</code></pre>
<p>Once you have the element or context, you're ready to instantiate a pre-=
defined chart-type or create your own!</p>
<p>The following example instantiates a bar chart showing the number of vot=
es for different colors and the y-axis starting at 0.</p>
<pre><code class=3D"lang-html"><span class=3D"hljs-tag">&lt;<span class=3D"=
hljs-name">canvas</span> <span class=3D"hljs-attr">id</span>=3D<span class=
=3D"hljs-string">"myChart"</span> <span class=3D"hljs-attr">width</span>=3D=
<span class=3D"hljs-string">"400"</span> <span class=3D"hljs-attr">height</=
span>=3D<span class=3D"hljs-string">"400"</span>&gt;</span><span class=3D"h=
ljs-tag">&lt;/<span class=3D"hljs-name">canvas</span>&gt;</span>
<span class=3D"hljs-tag">&lt;<span class=3D"hljs-name">script</span>&gt;</s=
pan><span class=3D"javascript">
<span class=3D"hljs-keyword">var</span> ctx =3D <span class=3D"hljs-built_i=
n">document</span>.getElementById(<span class=3D"hljs-string">"myChart"</sp=
an>);
<span class=3D"hljs-keyword">var</span> myChart =3D <span class=3D"hljs-key=
word">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'bar'</span>,
    data: {
        labels: [<span class=3D"hljs-string">"Red"</span>, <span class=3D"h=
ljs-string">"Blue"</span>, <span class=3D"hljs-string">"Yellow"</span>, <sp=
an class=3D"hljs-string">"Green"</span>, <span class=3D"hljs-string">"Purpl=
e"</span>, <span class=3D"hljs-string">"Orange"</span>],
        datasets: [{
            label: <span class=3D"hljs-string">'# of Votes'</span>,
            data: [<span class=3D"hljs-number">12</span>, <span class=3D"hl=
js-number">19</span>, <span class=3D"hljs-number">3</span>, <span class=3D"=
hljs-number">5</span>, <span class=3D"hljs-number">2</span>, <span class=3D=
"hljs-number">3</span>]
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero:<span class=3D"hljs-literal">true</span>
                }
            }]
        }
    }
});
</span><span class=3D"hljs-tag">&lt;/<span class=3D"hljs-name">script</span=
>&gt;</span>
</code></pre>
<p>It's that easy to get started using Chart.js! From here you can explore =
the many options that can help you customise your charts with scales, toolt=
ips, labels, colors, custom actions, and much more.</p>
<h3 id=3D"getting-started-global-chart-configuration"><a class=3D"fragment-=
link" href=3D"http://www.chartjs.org/docs/#getting-started-global-chart-con=
figuration">Global chart configuration</a></h3><p>This concept was introduc=
ed in Chart.js 1.0 to keep configuration DRY, and allow for changing option=
s globally across chart types, avoiding the need to specify options for eac=
h instance, or the default for a particular chart type.</p>
<p>Chart.js merges configurations and options in a few places with the glob=
al defaults using chart type defaults and scales defaults. This way you can=
 be as specific as you want in your individual chart configs, or change the=
 defaults for Chart.js as a whole.</p>
<p>The global options are defined in <code>Chart.defaults.global</code>.</p=
>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>responsive</td>
<td>Boolean</td>
<td>true</td>
<td>Resizes when the canvas container does.</td>
</tr>
<tr>
<td>responsiveAnimationDuration</td>
<td>Number</td>
<td>0</td>
<td>Duration in milliseconds it takes to animate to new size after a resize=
 event.</td>
</tr>
<tr>
<td>maintainAspectRatio</td>
<td>Boolean</td>
<td>true</td>
<td>Maintain the original canvas aspect ratio <code>(width / height)</code>=
 when resizing</td>
</tr>
<tr>
<td>events</td>
<td>Array[String]</td>
<td><code>["mousemove", "mouseout", "click", "touchstart", "touchmove", "to=
uchend"]</code></td>
<td>Events that the chart should listen to for tooltips and hovering</td>
</tr>
<tr>
<td>hover</td>
<td>Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>hover</em>.onHover</td>
<td>Function</td>
<td>null</td>
<td>Called when any of the events fire. Called in the context of the chart =
and passed an array of active elements (bars, points, etc)</td>
</tr>
<tr>
<td><em>hover</em>.mode</td>
<td>String</td>
<td>'single'</td>
<td>Sets which elements hover. Acceptable options are <code>'single'</code>=
, <code>'label'</code>, or <code>'dataset'</code>. <code>single</code> high=
lights the closest element. <code>label</code> highlights elements in all d=
atasets at the same <code>X</code> value. <code>dataset</code> highlights t=
he closest dataset.</td>
</tr>
<tr>
<td><em>hover</em>.animationDuration</td>
<td>Number</td>
<td>400</td>
<td>Duration in milliseconds it takes to animate hover style changes</td>
</tr>
<tr>
<td>onClick</td>
<td>Function</td>
<td>null</td>
<td>Called if the event is of type 'mouseup' or 'click'. Called in the cont=
ext of the chart and passed an array of active elements</td>
</tr>
<tr>
<td>defaultColor</td>
<td>Color</td>
<td>'rgba(0,0,0,0.1)'</td>
<td></td>
</tr>
<tr>
<td>defaultFontColor</td>
<td>Color</td>
<td>'#666'</td>
<td>Default font color for all text</td>
</tr>
<tr>
<td>defaultFontFamily</td>
<td>String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td>Default font family for all text</td>
</tr>
<tr>
<td>defaultFontSize</td>
<td>Number</td>
<td>12</td>
<td>Default font size (in px) for text. Does not apply to radialLinear scal=
e point labels</td>
</tr>
<tr>
<td>defaultFontStyle</td>
<td>String</td>
<td>'normal'</td>
<td>Default font style. Does not apply to tooltip title or footer. Does not=
 apply to chart title</td>
</tr>
<tr>
<td>legendCallback</td>
<td>Function</td>
<td><code>function (chart) { }</code></td>
<td>Function to generate a legend. Receives the chart object to generate a =
legend from. Default implementation returns an HTML string.</td>
</tr>
</tbody>
</table>
</div><p>The global options for the chart title is defined in <code>Chart.d=
efaults.global.title</code></p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>display</td>
<td>Boolean</td>
<td>false</td>
<td>Show the title block</td>
</tr>
<tr>
<td>position</td>
<td>String</td>
<td>'top'</td>
<td>Position of the title. 'top' or 'bottom' are allowed</td>
</tr>
<tr>
<td>fullWidth</td>
<td>Boolean</td>
<td>true</td>
<td>Marks that this box should take the full width of the canvas (pushing d=
own other boxes)</td>
</tr>
<tr>
<td>fontColor</td>
<td>Color</td>
<td>'#666'</td>
<td>Text color</td>
</tr>
<tr>
<td>fontFamily</td>
<td>String</td>
<td>'Helvetica Neue'</td>
<td></td>
</tr>
<tr>
<td>fontSize</td>
<td>Number</td>
<td>12</td>
<td></td>
</tr>
<tr>
<td>fontStyle</td>
<td>String</td>
<td>'bold'</td>
<td></td>
</tr>
<tr>
<td>padding</td>
<td>Number</td>
<td>10</td>
<td>Number of pixels to add above and below the title text</td>
</tr>
<tr>
<td>text</td>
<td>String</td>
<td>''</td>
<td>Title text</td>
</tr>
</tbody>
</table>
</div><p>The global options for the chart legend is defined in <code>Chart.=
defaults.global.legend</code></p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>display</td>
<td>Boolean</td>
<td>true</td>
<td>Is the legend displayed</td>
</tr>
<tr>
<td>position</td>
<td>String</td>
<td>'top'</td>
<td>Position of the legend. Options are 'top' or 'bottom'</td>
</tr>
<tr>
<td>fullWidth</td>
<td>Boolean</td>
<td>true</td>
<td>Marks that this box should take the full width of the canvas (pushing d=
own other boxes)</td>
</tr>
<tr>
<td>onClick</td>
<td>Function</td>
<td><code>function(event, legendItem) {}</code></td>
<td>A callback that is called when a click is registered on top of a label =
item</td>
</tr>
<tr>
<td>labels</td>
<td>Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>labels</em>.boxWidth</td>
<td>Number</td>
<td>40</td>
<td>Width of coloured box</td>
</tr>
<tr>
<td><em>labels</em>.fontSize</td>
<td>Number</td>
<td>12</td>
<td>Font size</td>
</tr>
<tr>
<td><em>labels</em>.fontStyle</td>
<td>String</td>
<td>"normal"</td>
<td></td>
</tr>
<tr>
<td><em>labels</em>.fontColor</td>
<td>Color</td>
<td>"#666"</td>
<td></td>
</tr>
<tr>
<td><em>labels</em>.fontFamily</td>
<td>String</td>
<td>"Helvetica Neue"</td>
<td></td>
</tr>
<tr>
<td><em>labels</em>.padding</td>
<td>Number</td>
<td>10</td>
<td>Padding between rows of colored boxes</td>
</tr>
<tr>
<td><em>labels</em>.generateLabels:</td>
<td>Function</td>
<td><code>function(data) {  }</code></td>
<td>Generates legend items for each thing in the legend. Default implementa=
tion returns the text + styling for the color box. Styles that can be retur=
ned are <code>fillStyle</code>, <code>strokeStyle</code>, <code>lineCap</co=
de>, <code>lineDash</code>, <code>lineDashOffset</code>, <code>lineWidth</c=
ode>, <code>lineJoin</code>. Return a <code>hidden</code> attribute to indi=
cate that the label refers to something that is not visible. A strikethroug=
h style will be given to the text in this case.</td>
</tr>
</tbody>
</table>
</div><p>The global options for tooltips are defined in <code>Chart.default=
s.global.tooltips</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th style=3D"text-align:center">Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>enabled</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>custom</td>
<td style=3D"text-align:center"></td>
<td>null</td>
<td></td>
</tr>
<tr>
<td>mode</td>
<td style=3D"text-align:center">String</td>
<td>'single'</td>
<td>Sets which elements appear in the tooltip. Acceptable options are <code=
>'single'</code> or <code>'label'</code>. <code>single</code> highlights th=
e closest element. <code>label</code> highlights elements in all datasets a=
t the same <code>X</code> value.</td>
</tr>
<tr>
<td>backgroundColor</td>
<td style=3D"text-align:center">Color</td>
<td>'rgba(0,0,0,0.8)'</td>
<td>Background color of the tooltip</td>
</tr>
<tr>
<td></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Label</td>
<td style=3D"text-align:center"></td>
<td></td>
<td>There are three labels you can control. <code>title</code>, <code>body<=
/code>, <code>footer</code> the star (*) represents one of these three. <em=
>(i.e. titleFontFamily, footerSpacing)</em></td>
</tr>
<tr>
<td>*FontFamily</td>
<td style=3D"text-align:center">String</td>
<td>"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"</td>
<td></td>
</tr>
<tr>
<td>*FontSize</td>
<td style=3D"text-align:center">Number</td>
<td>12</td>
<td></td>
</tr>
<tr>
<td>*FontStyle</td>
<td style=3D"text-align:center">String</td>
<td>title - "bold", body - "normal", footer - "bold"</td>
<td></td>
</tr>
<tr>
<td>*Spacing</td>
<td style=3D"text-align:center">Number</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>*Color</td>
<td style=3D"text-align:center">Color</td>
<td>"#fff"</td>
<td></td>
</tr>
<tr>
<td>*Align</td>
<td style=3D"text-align:center">String</td>
<td>"left"</td>
<td>text alignment. See <a href=3D"https://developer.mozilla.org/en-US/docs=
/Web/API/CanvasRenderingContext2D/textAlign" target=3D"_blank">MDN Canvas D=
ocumentation</a></td>
</tr>
<tr>
<td>titleMarginBottom</td>
<td style=3D"text-align:center">Number</td>
<td>6</td>
<td>Margin to add on bottom of title section</td>
</tr>
<tr>
<td>footerMarginTop</td>
<td style=3D"text-align:center">Number</td>
<td>6</td>
<td>Margin to add before drawing the footer</td>
</tr>
<tr>
<td>xPadding</td>
<td style=3D"text-align:center">Number</td>
<td>6</td>
<td>Padding to add on left and right of tooltip</td>
</tr>
<tr>
<td>yPadding</td>
<td style=3D"text-align:center">Number</td>
<td>6</td>
<td>Padding to add on top and bottom of tooltip</td>
</tr>
<tr>
<td>caretSize</td>
<td style=3D"text-align:center">Number</td>
<td>5</td>
<td>Size, in px, of the tooltip arrow</td>
</tr>
<tr>
<td>cornerRadius</td>
<td style=3D"text-align:center">Number</td>
<td>6</td>
<td>Radius of tooltip corner curves</td>
</tr>
<tr>
<td>multiKeyBackground</td>
<td style=3D"text-align:center">Color</td>
<td>"#fff"</td>
<td>Color to draw behind the colored boxes when multiple items are in the t=
ooltip</td>
</tr>
<tr>
<td></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>callbacks</td>
<td style=3D"text-align:center">Object</td>
<td>-</td>
<td>V2.0 introduces callback functions as a replacement for the template en=
gine in v1. The tooltip has the following callbacks for providing text. For=
 all functions, 'this' will be the tooltip object create from the Chart.Too=
ltip constructor</td>
</tr>
<tr>
<td><strong>Callback Functions</strong></td>
<td style=3D"text-align:center"></td>
<td></td>
<td>All functions are called with the same arguments</td>
</tr>
<tr>
<td>xLabel</td>
<td style=3D"text-align:center">String or Array[Strings]</td>
<td></td>
<td>This is the xDataValue for each item to be displayed in the tooltip</td=
>
</tr>
<tr>
<td>yLabel</td>
<td style=3D"text-align:center">String or Array[Strings]</td>
<td></td>
<td>This is the yDataValue for each item to be displayed in the tooltip</td=
>
</tr>
<tr>
<td>index</td>
<td style=3D"text-align:center">Number</td>
<td></td>
<td>Data index.</td>
</tr>
<tr>
<td>data</td>
<td style=3D"text-align:center">Object</td>
<td></td>
<td>Data object passed to chart.</td>
</tr>
<tr>
<td><code>return</code></td>
<td style=3D"text-align:center">String or Array[Strings]</td>
<td></td>
<td>All functions must return either a string or an array of strings. Array=
s of strings are treated as multiple lines of text.</td>
</tr>
<tr>
<td></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td><em>callbacks</em>.beforeTitle</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Text to render before the title</td>
</tr>
<tr>
<td><em>callbacks</em>.title</td>
<td style=3D"text-align:center">Function</td>
<td><code>function(tooltipItems, data) { //Pick first xLabel }</code></td>
<td>Text to render as the title</td>
</tr>
<tr>
<td><em>callbacks</em>.afterTitle</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Text to render after the ttiel</td>
</tr>
<tr>
<td><em>callbacks</em>.beforeBody</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Text to render before the body section</td>
</tr>
<tr>
<td><em>callbacks</em>.beforeLabel</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Text to render before an individual label</td>
</tr>
<tr>
<td><em>callbacks</em>.label</td>
<td style=3D"text-align:center">Function</td>
<td><code>function(tooltipItem, data) { // Returns "datasetLabel: tooltipIt=
em.yLabel" }</code></td>
<td>Text to render as label</td>
</tr>
<tr>
<td><em>callbacks</em>.afterLabel</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Text to render after an individual label</td>
</tr>
<tr>
<td><em>callbacks</em>.afterBody</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Text to render after the body section</td>
</tr>
<tr>
<td><em>callbacks</em>.beforeFooter</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Text to render before the footer section</td>
</tr>
<tr>
<td><em>callbacks</em>.footer</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Text to render as the footer</td>
</tr>
<tr>
<td><em>callbacks</em>.afterFooter</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Text to render after the footer section</td>
</tr>
</tbody>
</table>
</div><p>The global options for animations are defined in <code>Chart.defau=
lts.global.animation</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th style=3D"text-align:center">Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>duration</td>
<td style=3D"text-align:center">Number</td>
<td>1000</td>
<td>The number of milliseconds an animation takes.</td>
</tr>
<tr>
<td>easing</td>
<td style=3D"text-align:center">String</td>
<td>"easeOutQuart"</td>
<td>Easing function to use.</td>
</tr>
<tr>
<td>onProgress</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Callback called on each step of an animation. Passed a single argument,=
 an object, containing the chart instance and an object with details of the=
 animation.</td>
</tr>
<tr>
<td>onComplete</td>
<td style=3D"text-align:center">Function</td>
<td>none</td>
<td>Callback called at the end of an animation. Passed the same arguments a=
s <code>onProgress</code></td>
</tr>
</tbody>
</table>
</div><p>The global options for elements are defined in <code>Chart.default=
s.global.elements</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th style=3D"text-align:center">Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>arc</td>
<td style=3D"text-align:center">Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>arc</em>.backgroundColor</td>
<td style=3D"text-align:center">Color</td>
<td><code>Chart.defaults.global.defaultColor</code></td>
<td>Default fill color for arcs</td>
</tr>
<tr>
<td><em>arc</em>.borderColor</td>
<td style=3D"text-align:center">Color</td>
<td>"#fff"</td>
<td>Default stroke color for arcs</td>
</tr>
<tr>
<td><em>arc</em>.borderWidth</td>
<td style=3D"text-align:center">Number</td>
<td>2</td>
<td>Default stroke width for arcs</td>
</tr>
<tr>
<td>line</td>
<td style=3D"text-align:center">Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>line</em>.lineTension</td>
<td style=3D"text-align:center">Number</td>
<td>0.4</td>
<td>Default bezier curve tension. Set to <code>0</code> for no bezier curve=
s.</td>
</tr>
<tr>
<td><em>line</em>.backgroundColor</td>
<td style=3D"text-align:center">Color</td>
<td><code>Chart.defaults.global.defaultColor</code></td>
<td>Default line fill color</td>
</tr>
<tr>
<td><em>line</em>.borderWidth</td>
<td style=3D"text-align:center">Number</td>
<td>3</td>
<td>Default line stroke width</td>
</tr>
<tr>
<td><em>line</em>.borderColor</td>
<td style=3D"text-align:center">Color</td>
<td><code>Chart.defaults.global.defaultColor</code></td>
<td>Default line stroke color</td>
</tr>
<tr>
<td><em>line</em>.borderCapStyle</td>
<td style=3D"text-align:center">String</td>
<td>'butt'</td>
<td>Default line cap style. See <a href=3D"https://developer.mozilla.org/en=
/docs/Web/API/CanvasRenderingContext2D/lineCap" target=3D"_blank">MDN</a></=
td>
</tr>
<tr>
<td><em>line</em>.borderDash</td>
<td style=3D"text-align:center">Array</td>
<td><code>[]</code></td>
<td>Default line dash. See <a href=3D"https://developer.mozilla.org/en-US/d=
ocs/Web/API/CanvasRenderingContext2D/setLineDash" target=3D"_blank">MDN</a>=
</td>
</tr>
<tr>
<td><em>line</em>.borderDashOffset</td>
<td style=3D"text-align:center">Number</td>
<td>0.0</td>
<td>Default line dash offset. See <a href=3D"https://developer.mozilla.org/=
en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset" target=3D"_blan=
k">MDN</a></td>
</tr>
<tr>
<td><em>line</em>.borderJoinStyle</td>
<td style=3D"text-align:center">String</td>
<td>'miter'</td>
<td>Default line join style. See <a href=3D"https://developer.mozilla.org/e=
n-US/docs/Web/API/CanvasRenderingContext2D/lineJoin" target=3D"_blank">MDN<=
/a></td>
</tr>
<tr>
<td><em>line</em>.fill</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>point</td>
<td style=3D"text-align:center">Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>point</em>.radius</td>
<td style=3D"text-align:center">Number</td>
<td>3</td>
<td>Default point radius</td>
</tr>
<tr>
<td><em>point</em>.pointStyle</td>
<td style=3D"text-align:center">String</td>
<td>'circle'</td>
<td>Default point style</td>
</tr>
<tr>
<td><em>point</em>.backgroundColor</td>
<td style=3D"text-align:center">Color</td>
<td><code>Chart.defaults.global.defaultColor</code></td>
<td>Default point fill color</td>
</tr>
<tr>
<td><em>point</em>.borderWidth</td>
<td style=3D"text-align:center">Number</td>
<td>1</td>
<td>Default point stroke width</td>
</tr>
<tr>
<td><em>point</em>.borderColor</td>
<td style=3D"text-align:center">Color</td>
<td><code>Chart.defaults.global.defaultColor</code></td>
<td>Default point stroke color</td>
</tr>
<tr>
<td><em>point</em>.hitRadius</td>
<td style=3D"text-align:center">Number</td>
<td>1</td>
<td>Extra radius added to point radius for hit detection</td>
</tr>
<tr>
<td><em>point</em>.hoverRadius</td>
<td style=3D"text-align:center">Number</td>
<td>4</td>
<td>Default point radius when hovered</td>
</tr>
<tr>
<td><em>point</em>.hoverBorderWidth</td>
<td style=3D"text-align:center">Number</td>
<td>1</td>
<td>Default stroke width when hovered</td>
</tr>
<tr>
<td>rectangle</td>
<td style=3D"text-align:center">Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>rectangle</em>.backgroundColor</td>
<td style=3D"text-align:center">Color</td>
<td><code>Chart.defaults.global.defaultColor</code></td>
<td>Default bar fill color</td>
</tr>
<tr>
<td><em>rectangle</em>.borderWidth</td>
<td style=3D"text-align:center">Number</td>
<td>0</td>
<td>Default bar stroke width</td>
</tr>
<tr>
<td><em>rectangle</em>.borderColor</td>
<td style=3D"text-align:center">Color</td>
<td><code>Chart.defaults.global.defaultColor</code></td>
<td>Default bar stroke color</td>
</tr>
<tr>
<td><em>rectangle</em>.borderSkipped</td>
<td style=3D"text-align:center">String</td>
<td>'bottom'</td>
<td>Default skipped (excluded) border for rectangle. Can be one of <code>bo=
ttom</code>, <code>left</code>, <code>top</code>, <code>right</code></td>
</tr>
</tbody>
</table>
</div><p>If for example, you wanted all charts created to be responsive, an=
d resize when the browser window does, the following setting can be changed=
:</p>
<pre><code class=3D"lang-javascript">Chart.defaults.global.responsive =3D <=
span class=3D"hljs-literal">true</span>;
</code></pre>
<p>Now, every time we create a chart, <code>options.responsive</code> will =
be <code>true</code>.</p>
<h3 id=3D"getting-started-colors"><a class=3D"fragment-link" href=3D"http:/=
/www.chartjs.org/docs/#getting-started-colors">Colors</a></h3><p>When suppl=
ying colors to Chart options, you can use a number of formats. You can spec=
ify the color as a string in hexadecimal, RGB, or HSL notations. </p>
<p>You can also pass a <a href=3D"https://developer.mozilla.org/en-US/docs/=
Web/API/CanvasGradient" target=3D"_blank">CanvasGradient</a> object. You wi=
ll need to create this before passing to the chart, but using it you can ac=
hieve some interesting effects.</p>
<p>The final option is to pass a <a href=3D"https://developer.mozilla.org/e=
n-US/docs/Web/API/CanvasPattern" target=3D"_blank">CanvasPattern</a> object=
. For example, if you wanted to fill a dataset with a pattern from an image=
 you could do the following.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> img =3D <span class=3D"hljs-keyword">new</span> Image();
img.src =3D <span class=3D"hljs-string">'https://example.com/my_image.png'<=
/span>;
img.onload =3D <span class=3D"hljs-function"><span class=3D"hljs-keyword">f=
unction</span>(<span class=3D"hljs-params"></span>) </span>{
    <span class=3D"hljs-keyword">var</span> ctx =3D <span class=3D"hljs-bui=
lt_in">document</span>.getElementById(<span class=3D"hljs-string">'canvas'<=
/span>).getContext(<span class=3D"hljs-string">'2d'</span>);
    <span class=3D"hljs-keyword">var</span> fillPattern =3D ctx.CreatePatte=
rn(img, <span class=3D"hljs-string">'repeat'</span>);

    <span class=3D"hljs-keyword">var</span> chart =3D <span class=3D"hljs-k=
eyword">new</span> Chart(ctx, {
        data: {
            labels: [<span class=3D"hljs-string">'Item 1'</span>, <span cla=
ss=3D"hljs-string">'Item 2'</span>, <span class=3D"hljs-string">'Item 3'</s=
pan>],
            datasets: [{
                data: [<span class=3D"hljs-number">10</span>, <span class=
=3D"hljs-number">20</span>, <span class=3D"hljs-number">30</span>],
                backgroundColor: fillPattern
            }]
        }
    })
}
</code></pre>

		</div>
	</section>

		=09
			=09
	<section id=3D"line-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#line-cha=
rt">Line Chart</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"line-chart-introduction"><a class=3D"fragment-link" href=3D"ht=
tp://www.chartjs.org/docs/#line-chart-introduction">Introduction</a></h3><p=
>A line chart is a way of plotting data points on a line.</p>
<p>Often, it is used to show trend data, and the comparison of two data set=
s.</p>
<div class=3D"canvas-holder"><iframe class=3D"chartjs-hidden-iframe" style=
=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px; pos=
ition: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"wyci=
wyg://frame/0"></iframe>
    <canvas width=3D"557" height=3D"278" style=3D"width: 446px; height: 223=
px;"></canvas>
</div>

<h3 id=3D"line-chart-example-usage"><a class=3D"fragment-link" href=3D"http=
://www.chartjs.org/docs/#line-chart-example-usage">Example usage</a></h3><p=
re><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span> =
myLineChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: options
});
</code></pre>
<p>Alternatively a line chart can be created using syntax similar to the v1=
.0 syntax</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> myLineChart =3D Chart.Line(ctx, {
    data: data,
    options: options
});
</code></pre>
<h3 id=3D"line-chart-data-structure"><a class=3D"fragment-link" href=3D"htt=
p://www.chartjs.org/docs/#line-chart-data-structure">Data structure</a></h3=
><p>The following options can be included in a line chart dataset to config=
ure options for that specific dataset.</p>
<p>All point* properties can be specified as an array. If these are set to =
an array value, the first value applies to the first point, the second valu=
e to the second point, and so on.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>The data to plot in a line</td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>xAxisID</td>
<td><code>String</code></td>
<td>The ID of the x axis to plot this dataset on</td>
</tr>
<tr>
<td>yAxisID</td>
<td><code>String</code></td>
<td>The ID of the y axis to plot this dataset on</td>
</tr>
<tr>
<td>fill</td>
<td><code>Boolean</code></td>
<td>If true, fill the area under the line</td>
</tr>
<tr>
<td>lineTension</td>
<td><code>Number</code></td>
<td>Bezier curve tension of the line. Set to 0 to draw straightlines. <em>N=
ote</em> This was renamed from 'tension' but the old name still works.</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Color</code></td>
<td>The fill color under the line. See <a href=3D"http://www.chartjs.org/do=
cs/#colors">Colors</a></td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Number</code></td>
<td>The width of the line in pixels</td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Color</code></td>
<td>The color of the line.</td>
</tr>
<tr>
<td>borderCapStyle</td>
<td><code>String</code></td>
<td>Cap style of the line. See <a href=3D"https://developer.mozilla.org/en-=
US/docs/Web/API/CanvasRenderingContext2D/lineCap" target=3D"_blank">MDN</a>=
</td>
</tr>
<tr>
<td>borderDash</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Length and spacing of dashes. See <a href=3D"https://developer.mozilla.=
org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash" target=3D"_bla=
nk">MDN</a></td>
</tr>
<tr>
<td>borderDashOffset</td>
<td><code>Number</code></td>
<td>Offset for line dashes. See <a href=3D"https://developer.mozilla.org/en=
-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset" target=3D"_blank"=
>MDN</a></td>
</tr>
<tr>
<td>borderJoinStyle</td>
<td><code>String</code></td>
<td>Line joint style. See <a href=3D"https://developer.mozilla.org/en-US/do=
cs/Web/API/CanvasRenderingContext2D/lineJoin" target=3D"_blank">MDN</a></td=
>
</tr>
<tr>
<td>pointBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The border color for points.</td>
</tr>
<tr>
<td>pointBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The fill color for points</td>
</tr>
<tr>
<td>pointBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The width of the point border in pixels</td>
</tr>
<tr>
<td>pointRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The radius of the point shape. If set to 0, nothing is rendered. </td>
</tr>
<tr>
<td>pointHoverRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The radius of the point when hovered</td>
</tr>
<tr>
<td>pointHitRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The pixel size of the non-displayed point that reacts to mouse events</=
td>
</tr>
<tr>
<td>pointHoverBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Point background color when hovered</td>
</tr>
<tr>
<td>pointHoverBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Point border color when hovered</td>
</tr>
<tr>
<td>pointHoverBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>Border width of point when hovered</td>
</tr>
<tr>
<td>pointStyle</td>
<td><code>String or Array&lt;String&gt;</code></td>
<td>The style of point. Options include 'circle', 'triangle', 'rect', 'rect=
Rot', 'cross', 'crossRot', 'star', 'line', and 'dash'</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    labels: [<span class=3D"hljs-string">"January"</span>, <span class=3D"h=
ljs-string">"February"</span>, <span class=3D"hljs-string">"March"</span>, =
<span class=3D"hljs-string">"April"</span>, <span class=3D"hljs-string">"Ma=
y"</span>, <span class=3D"hljs-string">"June"</span>, <span class=3D"hljs-s=
tring">"July"</span>],
    datasets: [
        {
            label: <span class=3D"hljs-string">"My First dataset"</span>,
            fill: <span class=3D"hljs-literal">false</span>,
            lineTension: <span class=3D"hljs-number">0.1</span>,
            backgroundColor: <span class=3D"hljs-string">"rgba(75,192,192,0=
.4)"</span>,
            borderColor: <span class=3D"hljs-string">"rgba(75,192,192,1)"</=
span>,
            borderCapStyle: <span class=3D"hljs-string">'butt'</span>,
            borderDash: [],
            borderDashOffset: <span class=3D"hljs-number">0.0</span>,
            borderJoinStyle: <span class=3D"hljs-string">'miter'</span>,
            pointBorderColor: <span class=3D"hljs-string">"rgba(75,192,192,=
1)"</span>,
            pointBackgroundColor: <span class=3D"hljs-string">"#fff"</span>=
,
            pointBorderWidth: <span class=3D"hljs-number">1</span>,
            pointHoverRadius: <span class=3D"hljs-number">5</span>,
            pointHoverBackgroundColor: <span class=3D"hljs-string">"rgba(75=
,192,192,1)"</span>,
            pointHoverBorderColor: <span class=3D"hljs-string">"rgba(220,22=
0,220,1)"</span>,
            pointHoverBorderWidth: <span class=3D"hljs-number">2</span>,
            pointRadius: <span class=3D"hljs-number">1</span>,
            pointHitRadius: <span class=3D"hljs-number">10</span>,
            data: [<span class=3D"hljs-number">65</span>, <span class=3D"hl=
js-number">59</span>, <span class=3D"hljs-number">80</span>, <span class=3D=
"hljs-number">81</span>, <span class=3D"hljs-number">56</span>, <span class=
=3D"hljs-number">55</span>, <span class=3D"hljs-number">40</span>],
        }
    ]
};
</code></pre>
<p>The line chart requires an array of labels. This labels are shown on the=
 X axis. There must be one label for each data point. More labels than data=
points are allowed, in which case the line ends at the last data point.
The data for line charts is broken up into an array of datasets. Each datas=
et has a colour for the fill, a colour for the line and colours for the poi=
nts and strokes of the points. These colours are strings just like CSS. You=
 can use RGBA, RGB, HEX or HSL notation.</p>
<p>The label key on each dataset is optional, and can be used when generati=
ng a scale for the chart.</p>
<h3 id=3D"line-chart-chart-options"><a class=3D"fragment-link" href=3D"http=
://www.chartjs.org/docs/#line-chart-chart-options">Chart options</a></h3><p=
>These are the customisation options specific to Line charts. These options=
 are merged with the <a href=3D"http://www.chartjs.org/docs/#getting-starte=
d-global-chart-configuration">global chart configuration options</a>, and f=
orm the options of the chart.</p>
<p>The default options for line chart are defined in <code>Chart.defaults.l=
ine</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>showLines</td>
<td>Boolean</td>
<td>true</td>
<td>If false, the lines between points are not drawn</td>
</tr>
<tr>
<td>stacked</td>
<td>Boolean</td>
<td>false</td>
<td>If true, lines stack on top of each other along the y axis.</td>
</tr>
<tr>
<td><em>hover</em>.mode</td>
<td>String</td>
<td>"label"</td>
<td>Label's hover mode. "label" is used since the x axis displays data by t=
he index in the dataset.</td>
</tr>
<tr>
<td>elements</td>
<td>Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>elements</em>.point</td>
<td>Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>elements.point</em>.radius</td>
<td>Number</td>
<td><code>3</code></td>
<td>Defines the size of the Point shape. Can be set to zero to skip renderi=
ng a point.</td>
</tr>
<tr>
<td>scales</td>
<td>Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>scales</em>.xAxes</td>
<td>Array</td>
<td><code>[{type:"category","id":"x-axis-0"}]</code></td>
<td>Defines all of the x axes used in the chart. See the <a href=3D"http://=
www.chartjs.org/docs/#getting-started-scales">scale documentation</a> for d=
etails on the available options.</td>
</tr>
<tr>
<td><em>Options for xAxes</em></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>type</td>
<td>String</td>
<td>"category"</td>
<td>As defined in <a href=3D"http://www.chartjs.org/docs/#scales-category-s=
cale">"Category"</a>.</td>
</tr>
<tr>
<td>id</td>
<td>String</td>
<td>"x-axis-0"</td>
<td>Id of the axis so that data can bind to it.</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> <em>scales</em>.yAxes</td>
<td>Array</td>
<td><code>[{type:"linear","id":"y-axis-0"}]</code></td>
<td>Defines all of the y axes used in the chart. See the <a href=3D"http://=
www.chartjs.org/docs/#getting-started-scales">scale documentation</a> for d=
etails on the available options.</td>
</tr>
<tr>
<td> <em>Options for yAxes</em></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> type</td>
<td>String</td>
<td>"linear"</td>
<td>As defined in <a href=3D"http://www.chartjs.org/docs/#scales-linear-sca=
le">"Linear"</a>.</td>
</tr>
<tr>
<td> id</td>
<td>String</td>
<td>"y-axis-0"</td>
<td>Id of the axis so that data can bind to it.</td>
</tr>
</tbody>
</table>
</div><p>You can override these for your <code>Chart</code> instance by pas=
sing a member <code>options</code> into the <code>Line</code> method.</p>
<p>For example, we could have a line chart display without an x axis by doi=
ng the following. The config merge is smart enough to handle arrays so that=
 you do not need to specify all axis settings to change one thing.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx, {
    type: <span class=3D"hljs-string">'line'</span>,
    data: data,
    options: {
        xAxes: [{
            display: <span class=3D"hljs-literal">false</span>
        }]
    }
});
<span class=3D"hljs-comment">// This will create a chart with all of the de=
fault options, merged from the global config,</span>
<span class=3D"hljs-comment">// and the Line chart defaults, but this parti=
cular instance will have the x axis not displaying.</span>
</code></pre>
<p>We can also change these defaults values for each Line type that is crea=
ted, this object is available at <code>Chart.defaults.line</code>.</p>

		</div>
	</section>

		=09
			=09
	<section id=3D"bar-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#bar-char=
t">Bar Chart</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"bar-chart-introduction"><a class=3D"fragment-link" href=3D"htt=
p://www.chartjs.org/docs/#bar-chart-introduction">Introduction</a></h3><p>A=
 bar chart is a way of showing data as bars.</p>
<p>It is sometimes used to show trend data, and the comparison of multiple =
data sets side by side.</p>
<div class=3D"canvas-holder"><iframe class=3D"chartjs-hidden-iframe" style=
=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px; pos=
ition: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"wyci=
wyg://frame/1"></iframe>
    <canvas width=3D"557" height=3D"278" style=3D"width: 446px; height: 223=
px;"></canvas>
</div>

<h3 id=3D"bar-chart-example-usage"><a class=3D"fragment-link" href=3D"http:=
//www.chartjs.org/docs/#bar-chart-example-usage">Example usage</a></h3><pre=
><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span> my=
BarChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'bar'</span>,
    data: data,
    options: options
});
</code></pre>
<h3 id=3D"bar-chart-data-structure"><a class=3D"fragment-link" href=3D"http=
://www.chartjs.org/docs/#bar-chart-data-structure">Data structure</a></h3><=
p>The following options can be included in a bar chart dataset to configure=
 options for that specific dataset.</p>
<p>Some properties can be specified as an array. If these are set to an arr=
ay value, the first value applies to the first bar, the second value to the=
 second bar, and so on.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>The data to plot as bars</td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>xAxisID</td>
<td><code>String</code></td>
<td>The ID of the x axis to plot this dataset on</td>
</tr>
<tr>
<td>yAxisID</td>
<td><code>String</code></td>
<td>The ID of the y axis to plot this dataset on</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The fill color of the bars. See <a href=3D"http://www.chartjs.org/docs/=
#colors">Colors</a></td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Bar border color</td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>Border width of bar in pixels</td>
</tr>
<tr>
<td>borderSkipped</td>
<td><code>String or Array&lt;String&gt;</code></td>
<td>Which edge to skip drawing the border for. Options are 'bottom', 'left'=
, 'top', and 'right'</td>
</tr>
<tr>
<td>hoverBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Bar background color when hovered</td>
</tr>
<tr>
<td>hoverBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Bar border color when hovered</td>
</tr>
<tr>
<td>hoverBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>Border width of bar when hovered</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    labels: [<span class=3D"hljs-string">"January"</span>, <span class=3D"h=
ljs-string">"February"</span>, <span class=3D"hljs-string">"March"</span>, =
<span class=3D"hljs-string">"April"</span>, <span class=3D"hljs-string">"Ma=
y"</span>, <span class=3D"hljs-string">"June"</span>, <span class=3D"hljs-s=
tring">"July"</span>],
    datasets: [
        {
            label: <span class=3D"hljs-string">"My First dataset"</span>,
            backgroundColor: <span class=3D"hljs-string">"rgba(255,99,132,0=
.2)"</span>,
            borderColor: <span class=3D"hljs-string">"rgba(255,99,132,1)"</=
span>,
            borderWidth: <span class=3D"hljs-number">1</span>,
            hoverBackgroundColor: <span class=3D"hljs-string">"rgba(255,99,=
132,0.4)"</span>,
            hoverBorderColor: <span class=3D"hljs-string">"rgba(255,99,132,=
1)"</span>,
            data: [<span class=3D"hljs-number">65</span>, <span class=3D"hl=
js-number">59</span>, <span class=3D"hljs-number">80</span>, <span class=3D=
"hljs-number">81</span>, <span class=3D"hljs-number">56</span>, <span class=
=3D"hljs-number">55</span>, <span class=3D"hljs-number">40</span>],
        }
    ]
};
</code></pre>
<p>The bar chart has the a very similar data structure to the line chart, a=
nd has an array of datasets, each with colours and an array of data.
We have an array of labels too for display. In the example, we are showing =
the same data as the previous line chart example.</p>
<h3 id=3D"bar-chart-chart-options"><a class=3D"fragment-link" href=3D"http:=
//www.chartjs.org/docs/#bar-chart-chart-options">Chart Options</a></h3><p>T=
hese are the customisation options specific to Bar charts. These options ar=
e merged with the <a href=3D"http://www.chartjs.org/docs/#getting-started-g=
lobal-chart-configuration">global chart configuration options</a>, and form=
 the options of the chart.</p>
<p>The default options for bar chart are defined in <code>Chart.defaults.ba=
r</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th style=3D"text-align:center">Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>stacked</td>
<td style=3D"text-align:center">Boolean</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td><em>hover</em>.mode</td>
<td style=3D"text-align:center">String</td>
<td>"label"</td>
<td>Label's hover mode. "label" is used since the x axis displays data by t=
he index in the dataset.</td>
</tr>
<tr>
<td>scales</td>
<td style=3D"text-align:center">Object</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><em>scales</em>.xAxes</td>
<td style=3D"text-align:center">Array</td>
<td></td>
<td>The bar chart officially supports only 1 x-axis but uses an array to ke=
ep the API consistent. Use a scatter chart if you need multiple x axes.</td=
>
</tr>
<tr>
<td><em>Options for xAxes</em></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>type</td>
<td style=3D"text-align:center">String</td>
<td>"Category"</td>
<td>As defined in <a href=3D"http://www.chartjs.org/docs/#scales-category-s=
cale">Scales</a>.</td>
</tr>
<tr>
<td>display</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, show the scale.</td>
</tr>
<tr>
<td>id</td>
<td style=3D"text-align:center">String</td>
<td>"x-axis-1"</td>
<td>Id of the axis so that data can bind to it</td>
</tr>
<tr>
<td>categoryPercentage</td>
<td style=3D"text-align:center">Number</td>
<td>0.8</td>
<td>Percent (0-1) of the available width (the space between the gridlines f=
or small datasets) for each data-point to use for the bars. <a href=3D"http=
://www.chartjs.org/docs/#bar-chart-barpercentage-vs-categorypercentage">Rea=
d More</a></td>
</tr>
<tr>
<td>barPercentage</td>
<td style=3D"text-align:center">Number</td>
<td>0.9</td>
<td>Percent (0-1) of the available width each bar should be within the cate=
gory percentage. 1.0 will take the whole category width and put the bars ri=
ght next to each other. <a href=3D"http://www.chartjs.org/docs/#bar-chart-b=
arpercentage-vs-categorypercentage">Read More</a></td>
</tr>
<tr>
<td>gridLines</td>
<td style=3D"text-align:center">Object</td>
<td><a href=3D"http://www.chartjs.org/docs/#scales">See Scales</a></td>
<td></td>
</tr>
<tr>
<td><em>gridLines</em>.offsetGridLines</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, the bars for a particular data point fall between the grid lin=
es. If false, the grid line will go right down the middle of the bars.</td>
</tr>
<tr>
<td></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td><em>scales</em>.yAxes</td>
<td style=3D"text-align:center">Array</td>
<td><code>[{ type: "linear" }]</code></td>
<td></td>
</tr>
<tr>
<td><em>Options for xAxes</em></td>
<td style=3D"text-align:center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>type</td>
<td style=3D"text-align:center">String</td>
<td>"linear"</td>
<td>As defined in <a href=3D"http://www.chartjs.org/docs/#scales-linear-sca=
le">Scales</a>.</td>
</tr>
<tr>
<td>display</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, show the scale.</td>
</tr>
<tr>
<td>id</td>
<td style=3D"text-align:center">String</td>
<td>"y-axis-1"</td>
<td>Id of the axis so that data can bind to it.</td>
</tr>
</tbody>
</table>
</div><p>You can override these for your <code>Chart</code> instance by pas=
sing a second argument into the <code>Bar</code> method as an object with t=
he keys you want to override.</p>
<p>For example, we could have a bar chart without a stroke on each bar by d=
oing the following:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx, {
    type: <span class=3D"hljs-string">"bar"</span>,
    data: data,
    options: {
        scales: {
                xAxes: [{
                        stacked: <span class=3D"hljs-literal">true</span>
                }],
                yAxes: [{
                        stacked: <span class=3D"hljs-literal">true</span>
                }]
            }
        }
    }
});
<span class=3D"hljs-comment">// This will create a chart with all of the de=
fault options, merged from the global config,</span>
<span class=3D"hljs-comment">//  and the Bar chart defaults but this partic=
ular instance will have `stacked` set to true</span>
<span class=3D"hljs-comment">// for both x and y axes.</span>
</code></pre>
<p>We can also change these defaults values for each Bar type that is creat=
ed, this object is available at <code>Chart.defaults.bar</code>.</p>
<h4>barPercentage vs categoryPercentage</h4><p>The following shows the rela=
tionship between the bar percentage option and the category percentage opti=
on.</p>
<pre><code class=3D"lang-text">// categoryPercentage: 1.0
// barPercentage: 1.0
Bar:        | 1.0 | 1.0 |
Category:   |    1.0    |  =20
Sample:     |=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D|

// categoryPercentage: 1.0
// barPercentage: 0.5
Bar:          |.5|  |.5|
Category:  |      1.0     |  =20
Sample:    |=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D|

// categoryPercentage: 0.5
// barPercentage: 1.0
Bar:            |1.||1.|
Category:       |  .5  |  =20
Sample:     |=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D|
</code></pre>

		</div>
	</section>

		=09
			=09
	<section id=3D"radar-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#radar-ch=
art">Radar Chart</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"radar-chart-introduction"><a class=3D"fragment-link" href=3D"h=
ttp://www.chartjs.org/docs/#radar-chart-introduction">Introduction</a></h3>=
<p>A radar chart is a way of showing multiple data points and the variation=
 between them.</p>
<p>They are often useful for comparing the points of two or more different =
data sets.</p>
<div class=3D"canvas-holder"><iframe class=3D"chartjs-hidden-iframe" style=
=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px; pos=
ition: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"wyci=
wyg://frame/2"></iframe>
    <canvas width=3D"557" height=3D"278" style=3D"width: 446px; height: 223=
px;"></canvas>
</div>

<h3 id=3D"radar-chart-example-usage"><a class=3D"fragment-link" href=3D"htt=
p://www.chartjs.org/docs/#radar-chart-example-usage">Example usage</a></h3>=
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> myRadarChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'radar'</span>,
    data: data,
    options: options
});
</code></pre>
<h3 id=3D"radar-chart-data-structure"><a class=3D"fragment-link" href=3D"ht=
tp://www.chartjs.org/docs/#radar-chart-data-structure">Data structure</a></=
h3><p>The following options can be included in a radar chart dataset to con=
figure options for that specific dataset.</p>
<p>All point* properties can be specified as an array. If these are set to =
an array value, the first value applies to the first point, the second valu=
e to the second point, and so on.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>The data to plot in a line</td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>fill</td>
<td><code>Boolean</code></td>
<td>If true, fill the area under the line</td>
</tr>
<tr>
<td>lineTension</td>
<td><code>Number</code></td>
<td>Bezier curve tension of the line. Set to 0 to draw straightlines. <em>N=
ote</em> This was renamed from 'tension' but the old name still works.</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Color</code></td>
<td>The fill color under the line. See <a href=3D"http://www.chartjs.org/do=
cs/#colors">Colors</a></td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Number</code></td>
<td>The width of the line in pixels</td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Color</code></td>
<td>The color of the line.</td>
</tr>
<tr>
<td>borderCapStyle</td>
<td><code>String</code></td>
<td>Cap style of the line. See <a href=3D"https://developer.mozilla.org/en-=
US/docs/Web/API/CanvasRenderingContext2D/lineCap" target=3D"_blank">MDN</a>=
</td>
</tr>
<tr>
<td>borderDash</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Length and spacing of dashes. See <a href=3D"https://developer.mozilla.=
org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash" target=3D"_bla=
nk">MDN</a></td>
</tr>
<tr>
<td>borderDashOffset</td>
<td><code>Number</code></td>
<td>Offset for line dashes. See <a href=3D"https://developer.mozilla.org/en=
-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset" target=3D"_blank"=
>MDN</a></td>
</tr>
<tr>
<td>borderJoinStyle</td>
<td><code>String</code></td>
<td>Line joint style. See <a href=3D"https://developer.mozilla.org/en-US/do=
cs/Web/API/CanvasRenderingContext2D/lineJoin" target=3D"_blank">MDN</a></td=
>
</tr>
<tr>
<td>pointBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The border color for points.</td>
</tr>
<tr>
<td>pointBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>The fill color for points</td>
</tr>
<tr>
<td>pointBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The width of the point border in pixels</td>
</tr>
<tr>
<td>pointRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The radius of the point shape. If set to 0, nothing is rendered. </td>
</tr>
<tr>
<td>pointHoverRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The radius of the point when hovered</td>
</tr>
<tr>
<td>hitRadius</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>The pixel size of the non-displayed point that reacts to mouse events</=
td>
</tr>
<tr>
<td>pointHoverBackgroundColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Point background color when hovered</td>
</tr>
<tr>
<td>pointHoverBorderColor</td>
<td><code>Color or Array&lt;Color&gt;</code></td>
<td>Point border color when hovered</td>
</tr>
<tr>
<td>pointHoverBorderWidth</td>
<td><code>Number or Array&lt;Number&gt;</code></td>
<td>Border width of point when hovered</td>
</tr>
<tr>
<td>pointStyle</td>
<td><code>String or Array&lt;String&gt;</code></td>
<td>The style of point. Options include 'circle', 'triangle', 'rect', 'rect=
Rot', 'cross', 'crossRot', 'star', 'line', and 'dash'</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    labels: [<span class=3D"hljs-string">"Eating"</span>, <span class=3D"hl=
js-string">"Drinking"</span>, <span class=3D"hljs-string">"Sleeping"</span>=
, <span class=3D"hljs-string">"Designing"</span>, <span class=3D"hljs-strin=
g">"Coding"</span>, <span class=3D"hljs-string">"Cycling"</span>, <span cla=
ss=3D"hljs-string">"Running"</span>],
    datasets: [
        {
            label: <span class=3D"hljs-string">"My First dataset"</span>,
            backgroundColor: <span class=3D"hljs-string">"rgba(179,181,198,=
0.2)"</span>,
            borderColor: <span class=3D"hljs-string">"rgba(179,181,198,1)"<=
/span>,
            pointBackgroundColor: <span class=3D"hljs-string">"rgba(179,181=
,198,1)"</span>,
            pointBorderColor: <span class=3D"hljs-string">"#fff"</span>,
            pointHoverBackgroundColor: <span class=3D"hljs-string">"#fff"</=
span>,
            pointHoverBorderColor: <span class=3D"hljs-string">"rgba(179,18=
1,198,1)"</span>,
            data: [<span class=3D"hljs-number">65</span>, <span class=3D"hl=
js-number">59</span>, <span class=3D"hljs-number">90</span>, <span class=3D=
"hljs-number">81</span>, <span class=3D"hljs-number">56</span>, <span class=
=3D"hljs-number">55</span>, <span class=3D"hljs-number">40</span>]
        },
        {
            label: <span class=3D"hljs-string">"My Second dataset"</span>,
            backgroundColor: <span class=3D"hljs-string">"rgba(255,99,132,0=
.2)"</span>,
            borderColor: <span class=3D"hljs-string">"rgba(255,99,132,1)"</=
span>,
            pointBackgroundColor: <span class=3D"hljs-string">"rgba(255,99,=
132,1)"</span>,
            pointBorderColor: <span class=3D"hljs-string">"#fff"</span>,
            pointHoverBackgroundColor: <span class=3D"hljs-string">"#fff"</=
span>,
            pointHoverBorderColor: <span class=3D"hljs-string">"rgba(255,99=
,132,1)"</span>,
            data: [<span class=3D"hljs-number">28</span>, <span class=3D"hl=
js-number">48</span>, <span class=3D"hljs-number">40</span>, <span class=3D=
"hljs-number">19</span>, <span class=3D"hljs-number">96</span>, <span class=
=3D"hljs-number">27</span>, <span class=3D"hljs-number">100</span>]
        }
    ]
};
</code></pre>
<p>For a radar chart, to provide context of what each point means, we inclu=
de an array of strings that show around each point in the chart.
For the radar chart data, we have an array of datasets. Each of these is an=
 object, with a fill colour, a stroke colour, a colour for the fill of each=
 point, and a colour for the stroke of each point. We also have an array of=
 data values.
The label key on each dataset is optional, and can be used when generating =
a scale for the chart.</p>
<h3 id=3D"radar-chart-chart-options"><a class=3D"fragment-link" href=3D"htt=
p://www.chartjs.org/docs/#radar-chart-chart-options">Chart Options</a></h3>=
<p>These are the customisation options specific to Radar charts. These opti=
ons are merged with the <a href=3D"http://www.chartjs.org/docs/#getting-sta=
rted-global-chart-configuration">global chart configuration options</a>, an=
d form the options of the chart.</p>
<p>The default options for radar chart are defined in <code>Chart.defaults.=
radar</code>.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>scale</td>
<td>Object</td>
<td><a href=3D"http://www.chartjs.org/docs/#scales">See Scales</a> and <a h=
ref=3D"http://www.chartjs.org/docs/#scales-radial-linear-scale">Defaults fo=
r Radial Linear Scale</a></td>
<td>Options for the one scale used on the chart. Use this to style the tick=
s, labels, and grid lines.</td>
</tr>
<tr>
<td><em>scale</em>.type</td>
<td>String</td>
<td>"radialLinear"</td>
<td>As defined in <a href=3D"http://www.chartjs.org/docs/#scales-radial-lin=
ear-scale">"Radial Linear"</a>.</td>
</tr>
<tr>
<td><em>elements</em>.line</td>
<td>Object</td>
<td></td>
<td>Options for all line elements used on the chart, as defined in the glob=
al elements, duplicated here to show Radar chart specific defaults.</td>
</tr>
<tr>
<td><em>elements.line</em>.lineTension</td>
<td>Number</td>
<td>0</td>
<td>Tension exhibited by lines when calculating splineCurve. Setting to 0 c=
reates straight lines.</td>
</tr>
</tbody>
</table>
</div><p>You can override these for your <code>Chart</code> instance by pas=
sing a second argument into the <code>Radar</code> method as an object with=
 the keys you want to override.</p>
<p>For example, we could have a radar chart without a point for each on pie=
ce of data by doing the following:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx, {
    type: <span class=3D"hljs-string">"radar"</span>,
    data: data,
    options: {
            scale: {
                reverse: <span class=3D"hljs-literal">true</span>,
                ticks: {
                    beginAtZero: <span class=3D"hljs-literal">true</span>
                }
            }
    }
});
<span class=3D"hljs-comment">// This will create a chart with all of the de=
fault options, merged from the global config,</span>
<span class=3D"hljs-comment">//  and the Radar chart defaults but this part=
icular instance's scale will be reversed as</span>
<span class=3D"hljs-comment">// well as the ticks beginning at zero.</span>
</code></pre>
<p>We can also change these defaults values for each Radar type that is cre=
ated, this object is available at <code>Chart.defaults.radar</code>.</p>

		</div>
	</section>

		=09
			=09
	<section id=3D"polar-area-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#polar-ar=
ea-chart">Polar Area Chart</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"polar-area-chart-introduction"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#polar-area-chart-introduction">Introductio=
n</a></h3><p>Polar area charts are similar to pie charts, but each segment =
has the same angle - the radius of the segment differs depending on the val=
ue.</p>
<p>This type of chart is often useful when we want to show a comparison dat=
a similar to a pie chart, but also show a scale of values for context.</p>
<div class=3D"canvas-holder"><iframe class=3D"chartjs-hidden-iframe" style=
=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px; pos=
ition: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"wyci=
wyg://frame/3"></iframe>
    <canvas width=3D"557" height=3D"278" style=3D"width: 446px; height: 223=
px;"></canvas>
</div>

<h3 id=3D"polar-area-chart-example-usage"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#polar-area-chart-example-usage">Example us=
age</a></h3><pre><code class=3D"lang-javascript"><span class=3D"hljs-keywor=
d">new</span> Chart(ctx, {
    data: data,
    type: <span class=3D"hljs-string">'polarArea'</span>,
    options: options
});
</code></pre>
<h3 id=3D"polar-area-chart-data-structure"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#polar-area-chart-data-structure">Data stru=
cture</a></h3><p>The following options can be included in a polar area char=
t dataset to configure options for that specific dataset.</p>
<p>Some properties are specified as arrays. The first value applies to the =
first bar, the second value to the second bar, and so on.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>The data to plot as bars</td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>The fill color of the arcs. See <a href=3D"http://www.chartjs.org/docs/=
#colors">Colors</a></td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc border color</td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Border width of arcs in pixels</td>
</tr>
<tr>
<td>hoverBackgroundColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc background color when hovered</td>
</tr>
<tr>
<td>hoverBorderColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc border color when hovered</td>
</tr>
<tr>
<td>hoverBorderWidth</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Border width of arc when hovered</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    datasets: [{
        data: [
            <span class=3D"hljs-number">11</span>,
            <span class=3D"hljs-number">16</span>,
            <span class=3D"hljs-number">7</span>,
            <span class=3D"hljs-number">3</span>,
            <span class=3D"hljs-number">14</span>
        ],
        backgroundColor: [
            <span class=3D"hljs-string">"#FF6384"</span>,
            <span class=3D"hljs-string">"#4BC0C0"</span>,
            <span class=3D"hljs-string">"#FFCE56"</span>,
            <span class=3D"hljs-string">"#E7E9ED"</span>,
            <span class=3D"hljs-string">"#36A2EB"</span>
        ],
        label: <span class=3D"hljs-string">'My dataset'</span> <span class=
=3D"hljs-comment">// for legend</span>
    }],
    labels: [
        <span class=3D"hljs-string">"Red"</span>,
        <span class=3D"hljs-string">"Green"</span>,
        <span class=3D"hljs-string">"Yellow"</span>,
        <span class=3D"hljs-string">"Grey"</span>,
        <span class=3D"hljs-string">"Blue"</span>
    ]
};
</code></pre>
<p>As you can see, for the chart data you pass in an array of objects, with=
 a value and a colour. The value attribute should be a number, while the co=
lor attribute should be a string. Similar to CSS, for this string you can u=
se HEX notation, RGB, RGBA or HSL.</p>
<h3 id=3D"polar-area-chart-chart-options"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#polar-area-chart-chart-options">Chart opti=
ons</a></h3><p>These are the customisation options specific to Polar Area c=
harts. These options are merged with the <a href=3D"http://www.chartjs.org/=
docs/#getting-started-global-chart-configuration">global chart configuratio=
n options</a>, and form the options of the chart.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>scale</td>
<td>Object</td>
<td><a href=3D"http://www.chartjs.org/docs/#scales">See Scales</a> and <a h=
ref=3D"http://www.chartjs.org/docs/#scales-radial-linear-scale">Defaults fo=
r Radial Linear Scale</a></td>
<td>Options for the one scale used on the chart. Use this to style the tick=
s, labels, and grid.</td>
</tr>
<tr>
<td><em>scale</em>.type</td>
<td>String</td>
<td>"radialLinear"</td>
<td>As defined in <a href=3D"http://www.chartjs.org/docs/#scales-radial-lin=
ear-scale">"Radial Linear"</a>.</td>
</tr>
<tr>
<td><em>scale</em>.lineArc</td>
<td>Boolean</td>
<td>true</td>
<td>When true, lines are circular.</td>
</tr>
<tr>
<td>animateRotate</td>
<td>Boolean</td>
<td>true</td>
<td>If true, will animate the rotation of the chart.</td>
</tr>
<tr>
<td>animateScale</td>
<td>Boolean</td>
<td>true</td>
<td>If true, will animate scaling the chart.</td>
</tr>
<tr>
<td><em>legend</em>.<em>labels</em>.generateLabels</td>
<td>Function</td>
<td><code>function(data) {}</code></td>
<td>Returns labels for each the legend</td>
</tr>
<tr>
<td><em>legend</em>.onClick</td>
<td>Function</td>
<td>function(event, legendItem) {} `</td>
<td>Handles clicking an individual legend item</td>
</tr>
<tr>
<td>legendCallback</td>
<td>Function</td>
<td><code>function(chart)</code></td>
<td>Generates the HTML legend via calls to <code>generateLegend</code></td>
</tr>
</tbody>
</table>
</div><p>You can override these for your <code>Chart</code> instance by pas=
sing a second argument into the <code>PolarArea</code> method as an object =
with the keys you want to override.</p>
<p>For example, we could have a polar area chart with a black stroke on eac=
h segment like so:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx, {
    data: data,
    type: <span class=3D"hljs-string">"polarArea"</span>,
    options: {
        elements: {
            arc: {
                borderColor: <span class=3D"hljs-string">"#000000"</span>
            }
        }
    }
});
<span class=3D"hljs-comment">// This will create a chart with all of the de=
fault options, merged from the global config,</span>
<span class=3D"hljs-comment">// and the PolarArea chart defaults but this p=
articular instance will have `elements.arc.borderColor` set to `"#000000"`.=
</span>
</code></pre>
<p>We can also change these defaults values for each PolarArea type that is=
 created, this object is available at <code>Chart.defaults.polarArea</code>=
.</p>

		</div>
	</section>

		=09
			=09
	<section id=3D"doughnut-pie-chart">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#doughnut=
-pie-chart">Pie &amp; Doughnut Charts</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"doughnut-pie-chart-introduction"><a class=3D"fragment-link" hr=
ef=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-introduction">Introdu=
ction</a></h3><p>Pie and doughnut charts are probably the most commonly use=
d chart there are. They are divided into segments, the arc of each segment =
shows the proportional value of each piece of data.</p>
<p>They are excellent at showing the relational proportions between data.</=
p>
<p>Pie and doughnut charts are effectively the same class in Chart.js, but =
have one different default value - their <code>cutoutPercentage</code>. Thi=
s equates what percentage of the inner should be cut out. This defaults to =
<code>0</code> for pie charts, and <code>50</code> for doughnuts.</p>
<p>They are also registered under two aliases in the <code>Chart</code> cor=
e. Other than their different default value, and different alias, they are =
exactly the same.</p>
<div class=3D"canvas-holder half"><iframe class=3D"chartjs-hidden-iframe" s=
tyle=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px;=
 position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"=
wyciwyg://frame/4"></iframe>
    <canvas width=3D"278" height=3D"138" style=3D"width: 223px; height: 111=
px;"></canvas>
</div>

<div class=3D"canvas-holder half"><iframe class=3D"chartjs-hidden-iframe" s=
tyle=3D"width: 100%; display: block; border: 0px; height: 0px; margin: 0px;=
 position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;" src=3D"=
wyciwyg://frame/5"></iframe>
    <canvas width=3D"278" height=3D"138" style=3D"width: 223px; height: 111=
px;"></canvas>
</div>


<h3 id=3D"doughnut-pie-chart-example-usage"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-example-usage">Example =
usage</a></h3><pre><code class=3D"lang-javascript"><span class=3D"hljs-comm=
ent">// For a pie chart</span>
<span class=3D"hljs-keyword">var</span> myPieChart =3D <span class=3D"hljs-=
keyword">new</span> Chart(ctx,{
    type: <span class=3D"hljs-string">'pie'</span>,
    data: data,
    options: options
});
</code></pre>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// And fo=
r a doughnut chart</span>
<span class=3D"hljs-keyword">var</span> myDoughnutChart =3D <span class=3D"=
hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'doughnut'</span>,
    data: data,
    options: options
});
</code></pre>
<h3 id=3D"doughnut-pie-chart-data-structure"><a class=3D"fragment-link" hre=
f=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-data-structure">Data s=
tructure</a></h3><div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>The data to plot as bars</td>
</tr>
<tr>
<td>label</td>
<td><code>String</code></td>
<td>The label for the dataset which appears in the legend and tooltips</td>
</tr>
<tr>
<td>backgroundColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>The fill color of the arcs. See <a href=3D"http://www.chartjs.org/docs/=
#colors">Colors</a></td>
</tr>
<tr>
<td>borderColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc border color</td>
</tr>
<tr>
<td>borderWidth</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Border width of arcs in pixels</td>
</tr>
<tr>
<td>hoverBackgroundColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc background color when hovered</td>
</tr>
<tr>
<td>hoverBorderColor</td>
<td><code>Array&lt;Color&gt;</code></td>
<td>Arc border color when hovered</td>
</tr>
<tr>
<td>hoverBorderWidth</td>
<td><code>Array&lt;Number&gt;</code></td>
<td>Border width of arc when hovered</td>
</tr>
</tbody>
</table>
</div><p>An example data object using these attributes is shown below.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> data =3D {
    labels: [
        <span class=3D"hljs-string">"Red"</span>,
        <span class=3D"hljs-string">"Green"</span>,
        <span class=3D"hljs-string">"Yellow"</span>
    ],
    datasets: [
        {
            data: [<span class=3D"hljs-number">300</span>, <span class=3D"h=
ljs-number">50</span>, <span class=3D"hljs-number">100</span>],
            backgroundColor: [
                <span class=3D"hljs-string">"#FF6384"</span>,
                <span class=3D"hljs-string">"#36A2EB"</span>,
                <span class=3D"hljs-string">"#FFCE56"</span>
            ],
            hoverBackgroundColor: [
                <span class=3D"hljs-string">"#FF6384"</span>,
                <span class=3D"hljs-string">"#36A2EB"</span>,
                <span class=3D"hljs-string">"#FFCE56"</span>
            ]
        }]
};
</code></pre>
<p>For a pie chart, datasets need to contain an array of data points. The d=
ata points should be a number, Chart.js will total all of the numbers and c=
alculate the relative proportion of each. You can also add an array of back=
ground colors. The color attributes should be a string. Similar to CSS, for=
 this string you can use HEX notation, RGB, RGBA or HSL.</p>
<h3 id=3D"doughnut-pie-chart-chart-options"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#doughnut-pie-chart-chart-options">Chart op=
tions</a></h3><p>These are the customisation options specific to Pie &amp; =
Doughnut charts. These options are merged with the <a href=3D"http://www.ch=
artjs.org/docs/#getting-started-global-chart-configuration">global chart co=
nfiguration options</a>, and form the options of the chart.</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>cutoutPercentage</td>
<td>Number</td>
<td>50 - for doughnut, 0 - for pie</td>
<td>The percentage of the chart that is cut out of the middle.</td>
</tr>
<tr>
<td>rotation</td>
<td>Number</td>
<td>-0.5 * Math.PI</td>
<td>Starting angle to draw arcs from</td>
</tr>
<tr>
<td>circumference</td>
<td>Number</td>
<td>2 * Math.PI</td>
<td>Sweep to allow arcs to cover</td>
</tr>
<tr>
<td><em>animation</em>.animateRotate</td>
<td>Boolean</td>
<td>true</td>
<td>If true, will animate the rotation of the chart.</td>
</tr>
<tr>
<td><em>animation</em>.animateScale</td>
<td>Boolean</td>
<td>false</td>
<td>If true, will animate scaling the Doughnut from the centre.</td>
</tr>
<tr>
<td><em>legend</em>.<em>labels</em>.generateLabels</td>
<td>Function</td>
<td><code>function(data) {}</code></td>
<td>Returns labels for each the legend</td>
</tr>
<tr>
<td><em>legend</em>.onClick</td>
<td>Function</td>
<td>function(event, legendItem) {} `</td>
<td>Handles clicking an individual legend item</td>
</tr>
</tbody>
</table>
</div><p>You can override these for your <code>Chart</code> instance by pas=
sing a second argument into the <code>Doughnut</code> method as an object w=
ith the keys you want to override.</p>
<p>For example, we could have a doughnut chart that animates by scaling out=
 from the centre like so:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">new</span=
> Chart(ctx,{
    type:<span class=3D"hljs-string">"doughnut"</span>,
    animation:{
        animateScale:<span class=3D"hljs-literal">true</span>
    }
});
<span class=3D"hljs-comment">// This will create a chart with all of the de=
fault options, merged from the global config,</span>
<span class=3D"hljs-comment">// and the Doughnut chart defaults but this pa=
rticular instance will have `animateScale` set to `true`.</span>
</code></pre>
<p>We can also change these default values for each Doughnut type that is c=
reated, this object is available at <code>Chart.defaults.doughnut</code>. P=
ie charts also have a clone of these defaults available to change at <code>=
Chart.defaults.pie</code>, with the only difference being <code>cutoutPerce=
ntage</code> being set to 0.</p>

		</div>
	</section>

		=09
			=09
	<section id=3D"scales">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#scales">=
Scales</a>
		</h2>
		<div class=3D"section-text">
			<p>Scales in v2.0 of Chart.js are significantly more powerful, but also =
different than those of v1.0.</p>
<ul>
<li>Multiple x &amp; y axes are now supported.</li>
<li>A built-in label auto-skip feature now detects would-be overlapping tic=
ks and labels and removes every nth label to keep things displaying normall=
y.</li>
<li>Scale titles are now supported</li>
<li>New scale types can be extended without writing an entirely new chart t=
ype</li>
</ul>
<p>Every scale extends a core scale class with the following options:</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th style=3D"text-align:center">Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>type</td>
<td style=3D"text-align:center">String</td>
<td>Chart specific.</td>
<td>Type of scale being employed. Custom scales can be created and register=
ed with a string key. Options: <a href=3D"http://www.chartjs.org/docs/#scal=
es-category-scale">"category"</a>, <a href=3D"http://www.chartjs.org/docs/#=
scales-linear-scale">"linear"</a>, <a href=3D"http://www.chartjs.org/docs/#=
scales-logarithmic-scale">"logarithmic"</a>, <a href=3D"http://www.chartjs.=
org/docs/#scales-time-scale">"time"</a>, <a href=3D"http://www.chartjs.org/=
docs/#scales-radial-linear-scale">"radialLinear"</a></td>
</tr>
<tr>
<td>display</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, show the scale including gridlines, ticks, and labels. Overrid=
es <em>gridLines.display</em>, <em>scaleLabel.display</em>, and <em>ticks.d=
isplay</em>.</td>
</tr>
<tr>
<td>position</td>
<td style=3D"text-align:center">String</td>
<td>"left"</td>
<td>Position of the scale. Possible values are top, left, bottom and right.=
</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback called before the update process starts. Passed a single argum=
ent, the scale instance.</td>
</tr>
<tr>
<td>beforeSetDimensions</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs before dimensions are set. Passed a single argument,=
 the scale instance.</td>
</tr>
<tr>
<td>afterSetDimensions</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs after dimensions are set. Passed a single argument, =
the scale instance.</td>
</tr>
<tr>
<td>beforeDataLimits</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs before data limits are determined. Passed a single a=
rgument, the scale instance.</td>
</tr>
<tr>
<td>afterDataLimits</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs after data limits are determined. Passed a single ar=
gument, the scale instance.</td>
</tr>
<tr>
<td>beforeBuildTicks</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs before ticks are created. Passed a single argument, =
the scale instance.</td>
</tr>
<tr>
<td>afterBuildTicks</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs after ticks are created. Useful for filtering ticks.=
 Passed a single argument, the scale instance.</td>
</tr>
<tr>
<td>beforeTickToLabelConversion</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs before ticks are converted into strings. Passed a si=
ngle argument, the scale instance.</td>
</tr>
<tr>
<td>afterTickToLabelConversion</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs after ticks are converted into strings. Passed a sin=
gle argument, the scale instance.</td>
</tr>
<tr>
<td>beforeCalculateTickRotation</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs before tick rotation is determined. Passed a single =
argument, the scale instance.</td>
</tr>
<tr>
<td>afterCalculateTickRotation</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs after tick rotation is determined. Passed a single a=
rgument, the scale instance.</td>
</tr>
<tr>
<td>beforeFit</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs before the scale fits to the canvas. Passed a single=
 argument, the scale instance.</td>
</tr>
<tr>
<td>afterFit</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs after the scale fits to the canvas. Passed a single =
argument, the scale instance.</td>
</tr>
<tr>
<td>afterUpdate</td>
<td style=3D"text-align:center">Function</td>
<td>undefined</td>
<td>Callback that runs at the end of the update process. Passed a single ar=
gument, the scale instance.</td>
</tr>
<tr>
<td><strong>gridLines</strong></td>
<td style=3D"text-align:center">Object</td>
<td>-</td>
<td>Options for the grid lines that run perpendicular to the axis.</td>
</tr>
<tr>
<td><em>gridLines</em>.display</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td><em>gridLines</em>.color</td>
<td style=3D"text-align:center">Color</td>
<td>"rgba(0, 0, 0, 0.1)"</td>
<td>Color of the grid lines.</td>
</tr>
<tr>
<td><em>gridLines</em>.lineWidth</td>
<td style=3D"text-align:center">Number</td>
<td>1</td>
<td>Stroke width of grid lines</td>
</tr>
<tr>
<td><em>gridLines</em>.drawOnChartArea</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, draw lines on the chart area inside the axis lines. This is us=
eful when there are multiple axes and you need to control which grid lines =
are drawn</td>
</tr>
<tr>
<td><em>gridLines</em>.drawTicks</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, draw lines beside the ticks in the axis area beside the chart.=
</td>
</tr>
<tr>
<td><em>gridLines</em>.tickMarkLength</td>
<td style=3D"text-align:center">Number</td>
<td>10</td>
<td>Length in pixels that the grid lines will draw into the axis area.</td>
</tr>
<tr>
<td><em>gridLines</em>.zeroLineWidth</td>
<td style=3D"text-align:center">Number</td>
<td>1</td>
<td>Stroke width of the grid line for the first index (index 0).</td>
</tr>
<tr>
<td><em>gridLines</em>.zeroLineColor</td>
<td style=3D"text-align:center">Color</td>
<td>"rgba(0, 0, 0, 0.25)"</td>
<td>Stroke color of the grid line for the first index (index 0).</td>
</tr>
<tr>
<td><em>gridLines</em>.offsetGridLines</td>
<td style=3D"text-align:center">Boolean</td>
<td>false</td>
<td>If true, offset labels from grid lines.</td>
</tr>
<tr>
<td><strong>scaleLabel</strong></td>
<td style=3D"text-align:center">Object</td>
<td></td>
<td>Title for the entire axis.</td>
</tr>
<tr>
<td><em>scaleLabel</em>.display</td>
<td style=3D"text-align:center">Boolean</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td><em>scaleLabel</em>.labelString</td>
<td style=3D"text-align:center">String</td>
<td>""</td>
<td>The text for the title. (i.e. "# of People", "Response Choices")</td>
</tr>
<tr>
<td><em>scaleLabel</em>.fontColor</td>
<td style=3D"text-align:center">Color</td>
<td>"#666"</td>
<td>Font color for the scale title.</td>
</tr>
<tr>
<td><em>scaleLabel</em>.fontFamily</td>
<td style=3D"text-align:center">String</td>
<td>"Helvetica Neue"</td>
<td>Font family for the scale title, follows CSS font-family options.</td>
</tr>
<tr>
<td><em>scaleLabel</em>.fontSize</td>
<td style=3D"text-align:center">Number</td>
<td>12</td>
<td>Font size for the scale title.</td>
</tr>
<tr>
<td><em>scaleLabel</em>.fontStyle</td>
<td style=3D"text-align:center">String</td>
<td>"normal"</td>
<td>Font style for the scale title, follows CSS font-style options (i.e. no=
rmal, italic, oblique, initial, inherit).</td>
</tr>
<tr>
<td><strong>ticks</strong></td>
<td style=3D"text-align:center">Object</td>
<td></td>
<td>Settings for the labels that run along the axis.</td>
</tr>
<tr>
<td><em>ticks</em>.beginAtZero</td>
<td style=3D"text-align:center">Boolean</td>
<td>false</td>
<td>If true the scale will be begin at 0, if false the ticks will begin at =
your smallest data value.</td>
</tr>
<tr>
<td><em>ticks</em>.fontColor</td>
<td style=3D"text-align:center">Color</td>
<td>"#666"</td>
<td>Font color for the tick labels.</td>
</tr>
<tr>
<td><em>ticks</em>.fontFamily</td>
<td style=3D"text-align:center">String</td>
<td>"Helvetica Neue"</td>
<td>Font family for the tick labels, follows CSS font-family options.</td>
</tr>
<tr>
<td><em>ticks</em>.fontSize</td>
<td style=3D"text-align:center">Number</td>
<td>12</td>
<td>Font size for the tick labels.</td>
</tr>
<tr>
<td><em>ticks</em>.fontStyle</td>
<td style=3D"text-align:center">String</td>
<td>"normal"</td>
<td>Font style for the tick labels, follows CSS font-style options (i.e. no=
rmal, italic, oblique, initial, inherit).</td>
</tr>
<tr>
<td><em>ticks</em>.maxRotation</td>
<td style=3D"text-align:center">Number</td>
<td>90</td>
<td>Maximum rotation for tick labels when rotating to condense labels. Note=
: Rotation doesn't occur until necessary. <em>Note: Only applicable to hori=
zontal scales.</em></td>
</tr>
<tr>
<td><em>ticks</em>.minRotation</td>
<td style=3D"text-align:center">Number</td>
<td>20</td>
<td><em>currently not-implemented</em> Minimum rotation for tick labels whe=
n condensing is necessary.  <em>Note: Only applicable to horizontal scales.=
</em></td>
</tr>
<tr>
<td><em>ticks</em>.maxTicksLimit</td>
<td style=3D"text-align:center">Number</td>
<td>11</td>
<td>Maximum number of ticks and gridlines to show. If not defined, it will =
limit to 11 ticks but will show all gridlines.</td>
</tr>
<tr>
<td><em>ticks</em>.padding</td>
<td style=3D"text-align:center">Number</td>
<td>10</td>
<td>Padding between the tick label and the axis. <em>Note: Only applicable =
to horizontal scales.</em></td>
</tr>
<tr>
<td><em>ticks</em>.mirror</td>
<td style=3D"text-align:center">Boolean</td>
<td>false</td>
<td>Flips tick labels around axis, displaying the labels inside the chart i=
nstead of outside. <em>Note: Only applicable to vertical scales.</em></td>
</tr>
<tr>
<td><em>ticks</em>.reverse</td>
<td style=3D"text-align:center">Boolean</td>
<td>false</td>
<td>Reverses order of tick labels.</td>
</tr>
<tr>
<td><em>ticks</em>.display</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, show the ticks.</td>
</tr>
<tr>
<td><em>ticks</em>.suggestedMin</td>
<td style=3D"text-align:center">Number</td>
<td>-</td>
<td>User defined minimum number for the scale, overrides minimum value <em>=
except for if</em> it is higher than the minimum value.</td>
</tr>
<tr>
<td><em>ticks</em>.suggestedMax</td>
<td style=3D"text-align:center">Number</td>
<td>-</td>
<td>User defined maximum number for the scale, overrides maximum value <em>=
except for if</em> it is lower than the maximum value.</td>
</tr>
<tr>
<td><em>ticks</em>.min</td>
<td style=3D"text-align:center">Number</td>
<td>-</td>
<td>User defined minimum number for the scale, overrides minimum value. </t=
d>
</tr>
<tr>
<td><em>ticks</em>.max</td>
<td style=3D"text-align:center">Number</td>
<td>-</td>
<td>User defined minimum number for the scale, overrides maximum value</td>
</tr>
<tr>
<td><em>ticks</em>.autoSkip</td>
<td style=3D"text-align:center">Boolean</td>
<td>true</td>
<td>If true, automatically calculates how many labels that can be shown and=
 hides labels accordingly. Turn it off to show all labels no matter what</t=
d>
</tr>
<tr>
<td><em>ticks</em>.callback</td>
<td style=3D"text-align:center">Function</td>
<td><code>function(value) { return '' + value; }</code></td>
<td>Returns the string representation of the tick value as it should be dis=
played on the chart.</td>
</tr>
</tbody>
</table>
</div><p>The <code>callback</code> method may be used for advanced tick cus=
tomization. The following callback would display every label in scientific =
notation</p>
<pre><code class=3D"lang-javascript">{
    scales: {
        xAxes: [{
            ticks: {
                <span class=3D"hljs-comment">// Return an empty string to d=
raw the tick line but hide the tick label</span>
                <span class=3D"hljs-comment">// Return `null` or `undefined=
` to hide the tick line entirely</span>
                   userCallback: <span class=3D"hljs-function"><span class=
=3D"hljs-keyword">function</span>(<span class=3D"hljs-params">value, index,=
 values</span>) </span>{
                    <span class=3D"hljs-keyword">return</span> value.toExpo=
nential();
                }
            }
        }]
    }
}
</code></pre>
<h3 id=3D"scales-category-scale"><a class=3D"fragment-link" href=3D"http://=
www.chartjs.org/docs/#scales-category-scale">Category Scale</a></h3><p>The =
category scale will be familiar to those who have used v1.0. Labels are dra=
wn in from the labels array included in the chart data.</p>
<p>The category scale extends the core scale class with the following tick =
template:</p>
<pre><code class=3D"lang-javascript">{
    position: <span class=3D"hljs-string">"bottom"</span>,
}
</code></pre>
<p>The <code>ticks.min</code> and <code>ticks.max</code> attributes may be =
used with the category scale. Unlike other scales, the value of these attri=
butes must simply be something that can be found in the <code>labels</code>=
 array of the data object.</p>
<h3 id=3D"scales-linear-scale"><a class=3D"fragment-link" href=3D"http://ww=
w.chartjs.org/docs/#scales-linear-scale">Linear Scale</a></h3><p>The linear=
 scale can be used to display numerical data. It can be placed on either th=
e x or y axis. The scatter chart type automatically configures a line chart=
 to use one of these scales for the x axis.</p>
<p>The linear scale extends the core scale class with the following tick te=
mplate:</p>
<pre><code class=3D"lang-javascript">{
    position: <span class=3D"hljs-string">"left"</span>,
    ticks: {
        callback: <span class=3D"hljs-function"><span class=3D"hljs-keyword=
">function</span>(<span class=3D"hljs-params">tickValue, index, ticks</span=
>) </span>{
            <span class=3D"hljs-keyword">var</span> delta =3D ticks[<span c=
lass=3D"hljs-number">1</span>] - ticks[<span class=3D"hljs-number">0</span>=
];

            <span class=3D"hljs-comment">// If we have a number like 2.5 as=
 the delta, figure out how many decimal places we need</span>
            <span class=3D"hljs-keyword">if</span> (<span class=3D"hljs-bui=
lt_in">Math</span>.abs(delta) &gt; <span class=3D"hljs-number">1</span>) {
                <span class=3D"hljs-keyword">if</span> (tickValue !=3D=3D <=
span class=3D"hljs-built_in">Math</span>.floor(tickValue)) {
                    <span class=3D"hljs-comment">// not an integer</span>
                    delta =3D tickValue - <span class=3D"hljs-built_in">Mat=
h</span>.floor(tickValue);
                }
            }

            <span class=3D"hljs-keyword">var</span> logDelta =3D helpers.lo=
g10(<span class=3D"hljs-built_in">Math</span>.abs(delta));
            <span class=3D"hljs-keyword">var</span> tickString =3D <span cl=
ass=3D"hljs-string">''</span>;

            <span class=3D"hljs-keyword">if</span> (tickValue !=3D=3D <span=
 class=3D"hljs-number">0</span>) {
                <span class=3D"hljs-keyword">var</span> numDecimal =3D <spa=
n class=3D"hljs-number">-1</span> * <span class=3D"hljs-built_in">Math</spa=
n>.floor(logDelta);
                numDecimal =3D <span class=3D"hljs-built_in">Math</span>.ma=
x(<span class=3D"hljs-built_in">Math</span>.min(numDecimal, <span class=3D"=
hljs-number">20</span>), <span class=3D"hljs-number">0</span>); <span class=
=3D"hljs-comment">// toFixed has a max of 20 decimal places</span>
                tickString =3D tickValue.toFixed(numDecimal);
            } <span class=3D"hljs-keyword">else</span> {
                tickString =3D <span class=3D"hljs-string">'0'</span>; <spa=
n class=3D"hljs-comment">// never show decimal places for 0</span>
            }

              <span class=3D"hljs-keyword">return</span> tickString;
          }
    }
}
</code></pre>
<p>It also provides additional configuration options:</p>
<div class=3D"table-wrapper"><table>
<thead>
<tr>
<th>Name</th>
<th style=3D"text-align:center">Type</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>ticks</em>.stepSize</td>
<td style=3D"text-align:center">Number</td>
<td>-</td>
<td>User defined fixed step size for the scale. If set, the scale ticks wil=
l be enumerated by multiple of stepSize, having one tick per increment. If =
not set, the ticks are labeled automatically using the nice numbers algorit=
hm.</td>
</tr>
</tbody>
</table>
</div><h3 id=3D"scales-logarithmic-scale"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#scales-logarithmic-scale">Logarithmic Scal=
e</a></h3><p>The logarithmic scale is used to display logarithmic data of c=
ourse. It can be placed on either the x or y axis.</p>
<p>The log scale extends the core scale class with the following tick templ=
ate:</p>
<pre><code class=3D"lang-javascript">{
    position: <span class=3D"hljs-string">"left"</span>,
    ticks: {
        callback: <span class=3D"hljs-function"><span class=3D"hljs-keyword=
">function</span>(<span class=3D"hljs-params">value</span>) </span>{
            <span class=3D"hljs-keyword">var</span> remain =3D value / (<sp=
an class=3D"hljs-built_in">Math</span>.pow(<span class=3D"hljs-number">10</=
span>, <span class=3D"hljs-built_in">Math</span>.floor(Chart.helpers.log10(=
value))));

            <span class=3D"hljs-keyword">if</span> (remain =3D=3D=3D <span =
class=3D"hljs-number">1</span> || remain =3D=3D=3D <span class=3D"hljs-numb=
er">2</span> || remain =3D=3D=3D <span class=3D"hljs-number">5</span>) {
                <span class=3D"hljs-keyword">return</span> value.toExponent=
ial();
            } <span class=3D"hljs-keyword">else</span> {
                <span class=3D"hljs-keyword">return</span> <span class=3D"h=
ljs-string">''</span>;
            }
        }
    }
}
</code></pre>
<h3 id=3D"scales-time-scale"><a class=3D"fragment-link" href=3D"http://www.=
chartjs.org/docs/#scales-time-scale">Time Scale</a></h3><p>The time scale i=
s used to display times and dates. It can be placed on the x axis. When bui=
lding its ticks, it will automatically calculate the most comfortable unit =
base on the size of the scale.</p>
<p>The time scale extends the core scale class with the following tick temp=
late:</p>
<pre><code class=3D"lang-javascript">{
    position: <span class=3D"hljs-string">"bottom"</span>,
    time: {
        <span class=3D"hljs-comment">// string/callback - By default, date =
objects are expected. You may use a pattern string from http://momentjs.com=
/docs/#/parsing/string-format/ to parse a time string format, or use a call=
back function that is passed the label, and must return a moment() instance=
.</span>
        parser: <span class=3D"hljs-literal">false</span>,
        <span class=3D"hljs-comment">// string - By default, unit will auto=
matically be detected.  Override with 'week', 'month', 'year', etc. (see su=
pported time measurements)</span>
        unit: <span class=3D"hljs-literal">false</span>,

        <span class=3D"hljs-comment">// Number - The number of steps of the=
 above unit between ticks</span>
        unitStepSize: <span class=3D"hljs-number">1</span>

        <span class=3D"hljs-comment">// string - By default, no rounding is=
 applied.  To round, set to a supported time unit eg. 'week', 'month', 'yea=
r', etc.</span>
        round: <span class=3D"hljs-literal">false</span>,

        <span class=3D"hljs-comment">// Moment js for each of the units. Re=
places `displayFormat`</span>
        <span class=3D"hljs-comment">// To override, use a pattern string f=
rom http://momentjs.com/docs/#/displaying/format/</span>
        displayFormats: {
            <span class=3D"hljs-string">'millisecond'</span>: <span class=
=3D"hljs-string">'SSS [ms]'</span>,
            <span class=3D"hljs-string">'second'</span>: <span class=3D"hlj=
s-string">'h:mm:ss a'</span>, <span class=3D"hljs-comment">// 11:20:01 AM</=
span>
            <span class=3D"hljs-string">'minute'</span>: <span class=3D"hlj=
s-string">'h:mm:ss a'</span>, <span class=3D"hljs-comment">// 11:20:01 AM</=
span>
            <span class=3D"hljs-string">'hour'</span>: <span class=3D"hljs-=
string">'MMM D, hA'</span>, <span class=3D"hljs-comment">// Sept 4, 5PM</sp=
an>
            <span class=3D"hljs-string">'day'</span>: <span class=3D"hljs-s=
tring">'ll'</span>, <span class=3D"hljs-comment">// Sep 4 2015</span>
            <span class=3D"hljs-string">'week'</span>: <span class=3D"hljs-=
string">'ll'</span>, <span class=3D"hljs-comment">// Week 46, or maybe "[W]=
WW - YYYY" ?</span>
            <span class=3D"hljs-string">'month'</span>: <span class=3D"hljs=
-string">'MMM YYYY'</span>, <span class=3D"hljs-comment">// Sept 2015</span=
>
            <span class=3D"hljs-string">'quarter'</span>: <span class=3D"hl=
js-string">'[Q]Q - YYYY'</span>, <span class=3D"hljs-comment">// Q3</span>
            <span class=3D"hljs-string">'year'</span>: <span class=3D"hljs-=
string">'YYYY'</span>, <span class=3D"hljs-comment">// 2015</span>
        },
        <span class=3D"hljs-comment">// Sets the display format used in too=
ltip generation</span>
        tooltipFormat: <span class=3D"hljs-string">''</span>
    },
}
</code></pre>
<p>The following time measurements are supported:</p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-string">'millisecond'</span>: {
        display: <span class=3D"hljs-string">'SSS [ms]'</span>, <span class=
=3D"hljs-comment">// 002 ms</span>
        maxStep: <span class=3D"hljs-number">1000</span>,
    },
    <span class=3D"hljs-string">'second'</span>: {
        display: <span class=3D"hljs-string">'h:mm:ss a'</span>, <span clas=
s=3D"hljs-comment">// 11:20:01 AM</span>
        maxStep: <span class=3D"hljs-number">60</span>,
    },
    <span class=3D"hljs-string">'minute'</span>: {
        display: <span class=3D"hljs-string">'h:mm:ss a'</span>, <span clas=
s=3D"hljs-comment">// 11:20:01 AM</span>
        maxStep: <span class=3D"hljs-number">60</span>,
    },
    <span class=3D"hljs-string">'hour'</span>: {
        display: <span class=3D"hljs-string">'MMM D, hA'</span>, <span clas=
s=3D"hljs-comment">// Sept 4, 5PM</span>
        maxStep: <span class=3D"hljs-number">24</span>,
    },
    <span class=3D"hljs-string">'day'</span>: {
        display: <span class=3D"hljs-string">'ll'</span>, <span class=3D"hl=
js-comment">// Sep 4 2015</span>
        maxStep: <span class=3D"hljs-number">7</span>,
    },
    <span class=3D"hljs-string">'week'</span>: {
        display: <span class=3D"hljs-string">'ll'</span>, <span class=3D"hl=
js-comment">// Week 46, or maybe "[W]WW - YYYY" ?</span>
        maxStep: <span class=3D"hljs-number">4.3333</span>,
    },
    <span class=3D"hljs-string">'month'</span>: {
        display: <span class=3D"hljs-string">'MMM YYYY'</span>, <span class=
=3D"hljs-comment">// Sept 2015</span>
        maxStep: <span class=3D"hljs-number">12</span>,
    },
    <span class=3D"hljs-string">'quarter'</span>: {
        display: <span class=3D"hljs-string">'[Q]Q - YYYY'</span>, <span cl=
ass=3D"hljs-comment">// Q3</span>
        maxStep: <span class=3D"hljs-number">4</span>,
    },
    <span class=3D"hljs-string">'year'</span>: {
        display: <span class=3D"hljs-string">'YYYY'</span>, <span class=3D"=
hljs-comment">// 2015</span>
        maxStep: <span class=3D"hljs-literal">false</span>,
    },
}
</code></pre>
<h3 id=3D"scales-radial-linear-scale"><a class=3D"fragment-link" href=3D"ht=
tp://www.chartjs.org/docs/#scales-radial-linear-scale">Radial Linear Scale<=
/a></h3><p>The radial linear scale is used specifically for the radar chart=
 type.</p>
<p>The radial linear scale extends the core scale class with the following =
tick template:</p>
<pre><code class=3D"lang-javascript">{
    animate: <span class=3D"hljs-literal">true</span>,
    lineArc: <span class=3D"hljs-literal">false</span>,
    position: <span class=3D"hljs-string">"chartArea"</span>,

    angleLines: {
        display: <span class=3D"hljs-literal">true</span>,
        color: <span class=3D"hljs-string">"rgba(0, 0, 0, 0.1)"</span>,
        lineWidth: <span class=3D"hljs-number">1</span>
    },

    <span class=3D"hljs-comment">// label settings</span>
    ticks: {
        <span class=3D"hljs-comment">//Boolean - Show a backdrop to the sca=
le label</span>
        showLabelBackdrop: <span class=3D"hljs-literal">true</span>,

        <span class=3D"hljs-comment">//String - The colour of the label bac=
kdrop</span>
        backdropColor: <span class=3D"hljs-string">"rgba(255,255,255,0.75)"=
</span>,

        <span class=3D"hljs-comment">//Number - The backdrop padding above =
&amp; below the label in pixels</span>
        backdropPaddingY: <span class=3D"hljs-number">2</span>,

        <span class=3D"hljs-comment">//Number - The backdrop padding to the=
 side of the label in pixels</span>
        backdropPaddingX: <span class=3D"hljs-number">2</span>,

        <span class=3D"hljs-comment">//Number - Limit the maximum number of=
 ticks and gridlines</span>
        maxTicksLimit: <span class=3D"hljs-number">11</span>,
    },

    pointLabels: {
        <span class=3D"hljs-comment">//String - Point label font declaratio=
n</span>
        fontFamily: <span class=3D"hljs-string">"'Arial'"</span>,

        <span class=3D"hljs-comment">//String - Point label font weight</sp=
an>
        fontStyle: <span class=3D"hljs-string">"normal"</span>,

        <span class=3D"hljs-comment">//Number - Point label font size in pi=
xels</span>
        fontSize: <span class=3D"hljs-number">10</span>,

        <span class=3D"hljs-comment">//String - Point label font colour</sp=
an>
        fontColor: <span class=3D"hljs-string">"#666"</span>,

        <span class=3D"hljs-comment">//Function - Used to determine point l=
abels to show in scale</span>
        callback: <span class=3D"hljs-function"><span class=3D"hljs-keyword=
">function</span>(<span class=3D"hljs-params">pointLabel</span>) </span>{
            <span class=3D"hljs-keyword">return</span> pointLabel;
        }
    },
}
</code></pre>

		</div>
	</section>

		=09
			=09
	<section id=3D"advanced-usage">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#advanced=
-usage">Advanced usage</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"advanced-usage-prototype-methods"><a class=3D"fragment-link" h=
ref=3D"http://www.chartjs.org/docs/#advanced-usage-prototype-methods">Proto=
type methods</a></h3><p>For each chart, there are a set of global prototype=
 methods on the shared <code>ChartType</code> which you may find useful. Th=
ese are available on all charts created with Chart.js, but for the examples=
, let's use a line chart we've made.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// For ex=
ample:</span>
<span class=3D"hljs-keyword">var</span> myLineChart =3D <span class=3D"hljs=
-keyword">new</span> Chart(ctx, config);
</code></pre>
<h4>.destroy()</h4><p>Use this to destroy any chart instances that are crea=
ted. This will clean up any references stored to the chart object within Ch=
art.js, along with any associated event listeners attached by Chart.js.
This must be called before the canvas is reused for a new chart.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Destro=
ys a specific chart instance</span>
myLineChart.destroy();
</code></pre>
<h4>.update(duration, lazy)</h4><p>Triggers an update of the chart. This ca=
n be safely called after replacing the entire data object. This will update=
 all scales, legends, and then re-render the chart.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// durati=
on is the time for the animation of the redraw in miliseconds</span>
<span class=3D"hljs-comment">// lazy is a boolean. if true, the animation c=
an be interupted by other animations</span>
myLineChart.data.datasets[<span class=3D"hljs-number">0</span>].data[<span =
class=3D"hljs-number">2</span>] =3D <span class=3D"hljs-number">50</span>; =
<span class=3D"hljs-comment">// Would update the first dataset's value of '=
March' to be 50</span>
myLineChart.update(); <span class=3D"hljs-comment">// Calling update now an=
imates the position of March from 90 to 50.</span>
</code></pre>
<h4>.render(duration, lazy)</h4><p>Triggers a redraw of all chart elements.=
 Note, this does not update elements for new data. Use <code>.update()</cod=
e> in that case.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// durati=
on is the time for the animation of the redraw in miliseconds</span>
<span class=3D"hljs-comment">// lazy is a boolean. if true, the animation c=
an be interupted by other animations</span>
myLineChart.render(duration, lazy);
</code></pre>
<h4>.stop()</h4><p>Use this to stop any current animation loop. This will p=
ause the chart during any current animation frame. Call <code>.render()</co=
de> to re-animate.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Stops =
the charts animation loop at its current frame</span>
myLineChart.stop();
<span class=3D"hljs-comment">// =3D&gt; returns 'this' for chainability</sp=
an>
</code></pre>
<h4>.resize()</h4><p>Use this to manually resize the canvas element. This i=
s run each time the canvas container is resized, but you can call this meth=
od manually if you change the size of the canvas nodes container element.</=
p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Resize=
s &amp; redraws to fill its container element</span>
myLineChart.resize();
<span class=3D"hljs-comment">// =3D&gt; returns 'this' for chainability</sp=
an>
</code></pre>
<h4>.clear()</h4><p>Will clear the chart canvas. Used extensively internall=
y between animation frames, but you might find it useful.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Will c=
lear the canvas that myLineChart is drawn on</span>
myLineChart.clear();
<span class=3D"hljs-comment">// =3D&gt; returns 'this' for chainability</sp=
an>
</code></pre>
<h4>.toBase64Image()</h4><p>This returns a base 64 encoded string of the ch=
art in it's current state.</p>
<pre><code class=3D"lang-javascript">myLineChart.toBase64Image();
<span class=3D"hljs-comment">// =3D&gt; returns png data url of the image o=
n the canvas</span>
</code></pre>
<h4>.generateLegend()</h4><p>Returns an HTML string of a legend for that ch=
art. The legend is generated from the <code>legendCallback</code> in the op=
tions.</p>
<pre><code class=3D"lang-javascript">myLineChart.generateLegend();
<span class=3D"hljs-comment">// =3D&gt; returns HTML string of a legend for=
 this chart</span>
</code></pre>
<h4>.getElementAtEvent(e)</h4><p>Calling <code>getElementAtEvent(event)</co=
de> on your Chart instance passing an argument of an event, or jQuery event=
, will return the single element at the event position. If there are multip=
le items within range, only the first is returned</p>
<pre><code class=3D"lang-javascript">myLineChart.getElementAtEvent(e);
<span class=3D"hljs-comment">// =3D&gt; returns the first element at the ev=
ent point.</span>
</code></pre>
<h4>.getElementsAtEvent(e)</h4><p>Looks for the element under the event poi=
nt, then returns all elements at the same data index. This is used internal=
ly for 'label' mode highlighting.</p>
<p>Calling <code>getElementsAtEvent(event)</code> on your Chart instance pa=
ssing an argument of an event, or jQuery event, will return the point eleme=
nts that are at that the same position of that event.</p>
<pre><code class=3D"lang-javascript">canvas.onclick =3D <span class=3D"hljs=
-function"><span class=3D"hljs-keyword">function</span>(<span class=3D"hljs=
-params">evt</span>)</span>{
    <span class=3D"hljs-keyword">var</span> activePoints =3D myLineChart.ge=
tElementsAtEvent(evt);
    <span class=3D"hljs-comment">// =3D&gt; activePoints is an array of poi=
nts on the canvas that are at the same position as the click event.</span>
};
</code></pre>
<p>This functionality may be useful for implementing DOM based tooltips, or=
 triggering custom behaviour in your application.</p>
<h4>.getDatasetAtEvent(e)</h4><p>Looks for the element under the event poin=
t, then returns all elements from that dataset. This is used internally for=
 'dataset' mode highlighting</p>
<pre><code class=3D"lang-javascript">myLineChart.getDatasetAtEvent(e);
<span class=3D"hljs-comment">// =3D&gt; returns an array of elements</span>
</code></pre>
<h3 id=3D"advanced-usage-external-tooltips"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#advanced-usage-external-tooltips">External=
 Tooltips</a></h3><p>You can enable custom tooltips in the global or chart =
configuration like so:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> myPieChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    type: <span class=3D"hljs-string">'pie'</span>,
    data: data,
    options: {
        tooltips: {
            custom: <span class=3D"hljs-function"><span class=3D"hljs-keywo=
rd">function</span>(<span class=3D"hljs-params">tooltip</span>) </span>{
                <span class=3D"hljs-comment">// tooltip will be false if to=
oltip is not visible or should be hidden</span>
                <span class=3D"hljs-keyword">if</span> (!tooltip) {
                    <span class=3D"hljs-keyword">return</span>;
                }

                <span class=3D"hljs-comment">// Otherwise, tooltip will be =
an object with all tooltip properties like:</span>

                <span class=3D"hljs-comment">// tooltip.caretSize</span>
                <span class=3D"hljs-comment">// tooltip.caretPadding</span>
                <span class=3D"hljs-comment">// tooltip.chart</span>
                <span class=3D"hljs-comment">// tooltip.cornerRadius</span>
                <span class=3D"hljs-comment">// tooltip.fillColor</span>
                <span class=3D"hljs-comment">// tooltip.font...</span>
                <span class=3D"hljs-comment">// tooltip.text</span>
                <span class=3D"hljs-comment">// tooltip.x</span>
                <span class=3D"hljs-comment">// tooltip.y</span>
                <span class=3D"hljs-comment">// etc...</span>
            }
        }
    }
});
</code></pre>
<p>See <code>sample/line-customTooltips.html</code> for examples on how to =
get started.</p>
<h3 id=3D"advanced-usage-writing-new-scale-types"><a class=3D"fragment-link=
" href=3D"http://www.chartjs.org/docs/#advanced-usage-writing-new-scale-typ=
es">Writing new scale types</a></h3><p>Starting with Chart.js 2.0 scales ca=
n be individually extended. Scales should always derive from Chart.Scale.</=
p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> MyScale =3D Chart.Scale.extend({
    <span class=3D"hljs-comment">/* extensions ... */</span>
});

<span class=3D"hljs-comment">// MyScale is now derived from Chart.Scale</sp=
an>
</code></pre>
<p>Once you have created your scale class, you need to register it with the=
 global chart object so that it can be used. A default config for the scale=
 may be provided when registering the constructor. The first parameter to t=
he register function is a string key that is used later to identify which s=
cale type to use for a chart.</p>
<pre><code class=3D"lang-javascript">Chart.scaleService.registerScaleType(<=
span class=3D"hljs-string">'myScale'</span>, MyScale, defaultConfigObject);
</code></pre>
<p>To use the new scale, simply pass in the string key to the config when c=
reating a chart.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> lineChart =3D <span class=3D"hljs-keyword">new</span> Chart(ctx, {
    data: data,
    type: <span class=3D"hljs-string">'line'</span>,
    options: {
        scales: {
            yAxes: [{
                type: <span class=3D"hljs-string">'myScale'</span> <span cl=
ass=3D"hljs-comment">// this is the same key that was passed to the registe=
rScaleType function</span>
            }]
        }
    }
})
</code></pre>
<h4>Scale Properties</h4><p>Scale instances are given the following propert=
ies during the fitting process.</p>
<pre><code class=3D"lang-javascript">{
    left: <span class=3D"hljs-built_in">Number</span>, <span class=3D"hljs-=
comment">// left edge of the scale bounding box</span>
    right: <span class=3D"hljs-built_in">Number</span>, <span class=3D"hljs=
-comment">// right edge of the bounding box'</span>
    top: <span class=3D"hljs-built_in">Number</span>,=20
    bottom: <span class=3D"hljs-built_in">Number</span>,
    width: <span class=3D"hljs-built_in">Number</span>, <span class=3D"hljs=
-comment">// the same as right - left</span>
    height: <span class=3D"hljs-built_in">Number</span>, <span class=3D"hlj=
s-comment">// the same as bottom - top</span>

    <span class=3D"hljs-comment">// Margin on each side. Like css, this is =
outside the bounding box. </span>
    margins: {
        left: <span class=3D"hljs-built_in">Number</span>,
        right: <span class=3D"hljs-built_in">Number</span>,
        top: <span class=3D"hljs-built_in">Number</span>,
        bottom: <span class=3D"hljs-built_in">Number</span>,
    },

    <span class=3D"hljs-comment">// Amount of padding on the inside of the =
bounding box (like CSS)</span>
    paddingLeft: <span class=3D"hljs-built_in">Number</span>,
    paddingRight: <span class=3D"hljs-built_in">Number</span>,
    paddingTop: <span class=3D"hljs-built_in">Number</span>,
    paddingBottom: <span class=3D"hljs-built_in">Number</span>,
}
</code></pre>
<h4>Scale Interface</h4><p>To work with Chart.js, custom scale types must i=
mplement the following interface. </p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-comment">// Determines the data limits. Should set =
this.min and this.max to be the data max/min</span>
    determineDataLimits: <span class=3D"hljs-function"><span class=3D"hljs-=
keyword">function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Generate tick marks. this.chart is the =
chart instance. The data object can be accessed as this.chart.data</span>
    <span class=3D"hljs-comment">// buildTicks() should create a ticks arra=
y on the axis instance, if you intend to use any of the implementations fro=
m the base class</span>
    buildTicks: <span class=3D"hljs-function"><span class=3D"hljs-keyword">=
function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Get the value to show for the data at t=
he given index of the the given dataset, ie this.chart.data.datasets[datase=
tIndex].data[index]</span>
    getLabelForIndex: <span class=3D"hljs-function"><span class=3D"hljs-key=
word">function</span>(<span class=3D"hljs-params">index, datasetIndex</span=
>) </span>{},

    <span class=3D"hljs-comment">// Get the pixel (x coordinate for horizon=
tal axis, y coordinate for vertical axis) for a given value</span>
    <span class=3D"hljs-comment">// @param index: index into the ticks arra=
y</span>
    <span class=3D"hljs-comment">// @param includeOffset: if true, get the =
pixel halway between the given tick and the next</span>
    getPixelForTick: <span class=3D"hljs-function"><span class=3D"hljs-keyw=
ord">function</span>(<span class=3D"hljs-params">index, includeOffset</span=
>) </span>{},

    <span class=3D"hljs-comment">// Get the pixel (x coordinate for horizon=
tal axis, y coordinate for vertical axis) for a given value</span>
    <span class=3D"hljs-comment">// @param value : the value to get the pix=
el for</span>
    <span class=3D"hljs-comment">// @param index : index into the data arra=
y of the value</span>
    <span class=3D"hljs-comment">// @param datasetIndex : index of the data=
set the value comes from</span>
    <span class=3D"hljs-comment">// @param includeOffset : if true, get the=
 pixel halway between the given tick and the next</span>
    getPixelForValue: <span class=3D"hljs-function"><span class=3D"hljs-key=
word">function</span>(<span class=3D"hljs-params">value, index, datasetInde=
x, includeOffset</span>) </span>{}

    <span class=3D"hljs-comment">// Get the value for a given pixel (x coor=
dinate for horizontal axis, y coordinate for vertical axis)</span>
    <span class=3D"hljs-comment">// @param pixel : pixel value</span>
    getValueForPixel: <span class=3D"hljs-function"><span class=3D"hljs-key=
word">function</span>(<span class=3D"hljs-params">pixel</span>) </span>{}
}
</code></pre>
<p>Optionally, the following methods may also be overwritten, but an implem=
entation is already provided by the <code>Chart.Scale</code> base class.</p=
>
<pre><code class=3D"lang-javascript">    <span class=3D"hljs-comment">// Tr=
ansform the ticks array of the scale instance into strings. The default imp=
lementation simply calls this.options.ticks.callback(numericalTick, index, =
ticks); </span>
    convertTicksToLabels: <span class=3D"hljs-function"><span class=3D"hljs=
-keyword">function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Determine how much the labels will rota=
te by. The default implementation will only rotate labels if the scale is h=
orizontal. </span>
    calculateTickRotation: <span class=3D"hljs-function"><span class=3D"hlj=
s-keyword">function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Fits the scale into the canvas.</span>
    <span class=3D"hljs-comment">// this.maxWidth and this.maxHeight will t=
ell you the maximum dimensions the scale instance can be. Scales should end=
eavour to be as efficient as possible with canvas space.</span>
    <span class=3D"hljs-comment">// this.margins is the amount of space you=
 have on either side of your scale that you may expand in to. This is used =
already for calculating the best label rotation</span>
    <span class=3D"hljs-comment">// You must set this.minSize to be the siz=
e of your scale. It must be an object containing 2 properties: width and he=
ight.</span>
    <span class=3D"hljs-comment">// You must set this.width to be the width=
 and this.height to be the height of the scale</span>
    fit: <span class=3D"hljs-function"><span class=3D"hljs-keyword">functio=
n</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Draws the scale onto the canvas. this.(=
left|right|top|bottom) will have been populated to tell you the area on the=
 canvas to draw in</span>
    <span class=3D"hljs-comment">// @param chartArea : an object containing=
 four properties: left, right, top, bottom. This is the rectangle that line=
s, bars, etc will be drawn in. It may be used, for example, to draw grid li=
nes.</span>
    draw: <span class=3D"hljs-function"><span class=3D"hljs-keyword">functi=
on</span>(<span class=3D"hljs-params">chartArea</span>) </span>{},
</code></pre>
<p>The Core.Scale base class also has some utility functions that you may f=
ind useful.</p>
<pre><code class=3D"lang-javascript">{   =20
    <span class=3D"hljs-comment">// Returns true if the scale instance is h=
orizontal</span>
    isHorizontal: <span class=3D"hljs-function"><span class=3D"hljs-keyword=
">function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Get the correct value from the value fr=
om this.chart.data.datasets[x].data[]</span>
    <span class=3D"hljs-comment">// If dataValue is an object, returns .x o=
r .y depending on the return of isHorizontal()</span>
    <span class=3D"hljs-comment">// If the value is undefined, returns NaN<=
/span>
    <span class=3D"hljs-comment">// Otherwise returns the value.</span>
    <span class=3D"hljs-comment">// Note that in all cases, the returned va=
lue is not guaranteed to be a Number</span>
    getRightValue: <span class=3D"hljs-function"><span class=3D"hljs-keywor=
d">function</span>(<span class=3D"hljs-params">dataValue</span>) </span>{},
}
</code></pre>
<h3 id=3D"advanced-usage-writing-new-chart-types"><a class=3D"fragment-link=
" href=3D"http://www.chartjs.org/docs/#advanced-usage-writing-new-chart-typ=
es">Writing new chart types</a></h3><p>Chart.js 2.0 introduces the concept =
of controllers for each dataset. Like scales, new controllers can be writte=
n as needed.</p>
<pre><code class=3D"lang-javascript">Chart.controllers.MyType =3D Chart.Dat=
asetController.extend({

});


<span class=3D"hljs-comment">// Now we can create a new instance of our cha=
rt, using the Chart.js API</span>
<span class=3D"hljs-keyword">new</span> Chart(ctx, {
    <span class=3D"hljs-comment">// this is the string the constructor was =
registered at, ie Chart.controllers.MyType</span>
    type: <span class=3D"hljs-string">'MyType'</span>,
    data: data,
    options: options
});
</code></pre>
<h4>Dataset Controller Interface</h4><p>Dataset controllers must implement =
the following interface.</p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-comment">// Create elements for each piece of data =
in the dataset. Store elements in an array on the dataset as dataset.metaDa=
ta</span>
    addElements: <span class=3D"hljs-function"><span class=3D"hljs-keyword"=
>function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Create a single element for the data at=
 the given index and reset its state</span>
    addElementAndReset: <span class=3D"hljs-function"><span class=3D"hljs-k=
eyword">function</span>(<span class=3D"hljs-params">index</span>) </span>{}=
,

    <span class=3D"hljs-comment">// Draw the representation of the dataset<=
/span>
    <span class=3D"hljs-comment">// @param ease : if specified, this number=
 represents how far to transition elements. See the implementation of draw(=
) in any of the provided controllers to see how this should be used</span>
    draw: <span class=3D"hljs-function"><span class=3D"hljs-keyword">functi=
on</span>(<span class=3D"hljs-params">ease</span>) </span>{},

    <span class=3D"hljs-comment">// Remove hover styling from the given ele=
ment</span>
    removeHoverStyle: <span class=3D"hljs-function"><span class=3D"hljs-key=
word">function</span>(<span class=3D"hljs-params">element</span>) </span>{}=
,

    <span class=3D"hljs-comment">// Add hover styling to the given element<=
/span>
    setHoverStyle: <span class=3D"hljs-function"><span class=3D"hljs-keywor=
d">function</span>(<span class=3D"hljs-params">element</span>) </span>{},

    <span class=3D"hljs-comment">// Update the elements in response to new =
data</span>
    <span class=3D"hljs-comment">// @param reset : if true, put the element=
s into a reset state so they can animate to their final values</span>
    update: <span class=3D"hljs-function"><span class=3D"hljs-keyword">func=
tion</span>(<span class=3D"hljs-params">reset</span>) </span>{},
}
</code></pre>
<p>The following methods may optionally be overridden by derived dataset co=
ntrollers</p>
<pre><code class=3D"lang-javascript">{
    <span class=3D"hljs-comment">// Initializes the controller</span>
    initialize: <span class=3D"hljs-function"><span class=3D"hljs-keyword">=
function</span>(<span class=3D"hljs-params">chart, datasetIndex</span>) </s=
pan>{},

    <span class=3D"hljs-comment">// Ensures that the dataset represented by=
 this controller is linked to a scale. Overridden to helpers.noop in the po=
lar area and doughnut controllers as these</span>
    <span class=3D"hljs-comment">// chart types using a single scale</span>
    linkScales: <span class=3D"hljs-function"><span class=3D"hljs-keyword">=
function</span>(<span class=3D"hljs-params"></span>) </span>{},

    <span class=3D"hljs-comment">// Called by the main chart controller whe=
n an update is triggered. The default implementation handles the number of =
data points changing and creating elements appropriately. </span>
    buildOrUpdateElements: <span class=3D"hljs-function"><span class=3D"hlj=
s-keyword">function</span>(<span class=3D"hljs-params"></span>) </span>{}
}
</code></pre>
<h3 id=3D"advanced-usage-extending-existing-chart-types"><a class=3D"fragme=
nt-link" href=3D"http://www.chartjs.org/docs/#advanced-usage-extending-exis=
ting-chart-types">Extending existing chart types</a></h3><p>Extending or re=
placing an existing controller type is easy. Simply replace the constructor=
 for one of the built in types with your own.</p>
<p>The built in controller types are:</p>
<ul>
<li><code>Chart.controllers.line</code></li>
<li><code>Chart.controllers.bar</code></li>
<li><code>Chart.controllers.radar</code></li>
<li><code>Chart.controllers.doughnut</code></li>
<li><code>Chart.controllers.polarArea</code></li>
<li><code>Chart.controllers.bubble</code></li>
</ul>
<h4>Bar Controller</h4><p>The bar controller has a special property that yo=
u should be aware of. To correctly calculate the width of a bar, the contro=
ller must determine the number of datasets that map to bars. To do this, th=
e bar controller attaches a property <code>bar</code> to the dataset during=
 initialization. If you are creating a replacement or updated bar controlle=
r, you should do the same. This will ensure that charts with regular bars a=
nd your new derived bars will work seamlessly.</p>
<h3 id=3D"advanced-usage-creating-plugins"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#advanced-usage-creating-plugins">Creating =
Plugins</a></h3><p>Starting with v2.1.0, you can create plugins for chart.j=
s. To register your plugin, simply call <code>Chart.pluginService.register<=
/code> and pass your plugin in.
Plugins will be called at the following times</p>
<ul>
<li>Start of initialization</li>
<li>End of initialization</li>
<li>Start of update</li>
<li>End of update</li>
<li>Start of draw</li>
<li>End of draw</li>
</ul>
<p>Plugins should derive from Chart.PluginBase and implement the following =
interface</p>
<pre><code class=3D"lang-javascript">{
    beforeInit: <span class=3D"hljs-function"><span class=3D"hljs-keyword">=
function</span>(<span class=3D"hljs-params">chartInstance</span>) </span>{ =
},
    afterInit: <span class=3D"hljs-function"><span class=3D"hljs-keyword">f=
unction</span>(<span class=3D"hljs-params">chartInstance</span>) </span>{ }=
,

    beforeUpdate: <span class=3D"hljs-function"><span class=3D"hljs-keyword=
">function</span>(<span class=3D"hljs-params">chartInstance</span>) </span>=
{ },
    afterUpdate: <span class=3D"hljs-function"><span class=3D"hljs-keyword"=
>function</span>(<span class=3D"hljs-params">chartInstance</span>) </span>{=
 },

    <span class=3D"hljs-comment">// This is called at the start of a render=
. It is only called once, even if the animation will run for a number of fr=
ames. Use beforeDraw or afterDraw </span>
    <span class=3D"hljs-comment">// to do something on each animation frame=
</span>
    beforeRender: <span class=3D"hljs-function"><span class=3D"hljs-keyword=
">function</span>(<span class=3D"hljs-params">chartInstance</span>) </span>=
{ },

    <span class=3D"hljs-comment">// Easing is for animation</span>
    beforeDraw: <span class=3D"hljs-function"><span class=3D"hljs-keyword">=
function</span>(<span class=3D"hljs-params">chartInstance, easing</span>) <=
/span>{ },
    afterDraw: <span class=3D"hljs-function"><span class=3D"hljs-keyword">f=
unction</span>(<span class=3D"hljs-params">chartInstance, easing</span>) </=
span>{ }

    destroy: <span class=3D"hljs-function"><span class=3D"hljs-keyword">fun=
ction</span>(<span class=3D"hljs-params">chartInstance</span>) </span>{ }
}
</code></pre>
<h3 id=3D"advanced-usage-building-chart-js"><a class=3D"fragment-link" href=
=3D"http://www.chartjs.org/docs/#advanced-usage-building-chart-js">Building=
 Chart.js</a></h3><p>Chart.js uses <a href=3D"http://gulpjs.com/" target=3D=
"_blank">gulp</a> to build the library into a single JavaScript file. </p>
<p>Firstly, we need to ensure development dependencies are installed. With =
node and npm installed, after cloning the Chart.js repo to a local director=
y, and navigating to that directory in the command line, we can run the fol=
lowing:</p>
<pre><code class=3D"lang-bash">npm install
npm install -g gulp
</code></pre>
<p>This will install the local development dependencies for Chart.js, along=
 with a CLI for the JavaScript task runner <a href=3D"http://gulpjs.com/" t=
arget=3D"_blank">gulp</a>.</p>
<p>Now, we can run the <code>gulp build</code> task.</p>
<pre><code class=3D"lang-bash">gulp build
</code></pre>

		</div>
	</section>

		=09
			=09
	<section id=3D"notes">
		<h2 class=3D"section-title">
			<a class=3D"fragment-link" href=3D"http://www.chartjs.org/docs/#notes">N=
otes</a>
		</h2>
		<div class=3D"section-text">
			<h3 id=3D"notes-previous-versions"><a class=3D"fragment-link" href=3D"ht=
tp://www.chartjs.org/docs/#notes-previous-versions">Previous versions</a></=
h3><p>Please note - documentation for previous versions are available on th=
e GitHub repo.</p>
<ul>
<li><a href=3D"https://github.com/chartjs/Chart.js/tree/v1.1.1/docs" target=
=3D"_blank">1.x Documentation</a></li>
</ul>
<h3 id=3D"notes-browser-support"><a class=3D"fragment-link" href=3D"http://=
www.chartjs.org/docs/#notes-browser-support">Browser support</a></h3><p>Cha=
rt.js offers support for all browsers where canvas is supported.</p>
<p>Browser support for the canvas element is available in all modern &amp; =
major mobile browsers <a href=3D"http://caniuse.com/#feat=3Dcanvas" target=
=3D"_blank">(http://caniuse.com/#feat=3Dcanvas)</a>.</p>
<h3 id=3D"notes-bugs-amp-issues"><a class=3D"fragment-link" href=3D"http://=
www.chartjs.org/docs/#notes-bugs-amp-issues">Bugs &amp; issues</a></h3><p>P=
lease report these on the GitHub page - at <a href=3D"https://github.com/nn=
nick/Chart.js" target=3D"_blank">github.com/nnnick/Chart.js</a>. If you cou=
ld include a link to a simple <a href=3D"http://jsbin.com/" target=3D"_blan=
k">jsbin</a> or similar to demonstrate the issue, that'd be really helpful.=
</p>
<h3 id=3D"notes-contributing"><a class=3D"fragment-link" href=3D"http://www=
.chartjs.org/docs/#notes-contributing">Contributing</a></h3><p>New contribu=
tions to the library are welcome, just a couple of guidelines:</p>
<ul>
<li>Tabs for indentation, not spaces please.</li>
<li>Please ensure you're changing the individual files in <code>/src</code>=
, not the concatenated output in the <code>Chart.js</code> file in the root=
 of the repo.</li>
<li>Please check that your code will pass <code>jshint</code> code standard=
s, <code>gulp jshint</code> will run this for you.</li>
<li>Please keep pull requests concise, and document new functionality in th=
e relevant <code>.md</code> file.</li>
<li>Consider whether your changes are useful for all users, or if creating =
a Chart.js extension would be more appropriate.</li>
</ul>
<h3 id=3D"notes-license"><a class=3D"fragment-link" href=3D"http://www.char=
tjs.org/docs/#notes-license">License</a></h3><p>Chart.js is open source and=
 available under the <a href=3D"http://opensource.org/licenses/MIT" target=
=3D"_blank">MIT license</a>.</p>

		</div>
	</section>

		=09
		</div>
		<hr>
		<footer>
			<div class=3D"footer-logo">
	<img src=3D"http://www.chartjs.org/img/icon.svg">
</div>
<p class=3D"footer-note">Chart.js was built from the hard work of all <a hr=
ef=3D"https://github.com/chartjs/Chart.js/contributors" target=3D"_blank">t=
hese contributors.</a>

		</p></footer>
	=09
=09



</body></html>
------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://use.typekit.net/c/b077f1/1w;proxima-nova,7ceb210e49ade74e23101e10f006f110a0b6588c7c57777a6e3d98a38b749696,2clzC9:W:n3;proxima-nova-soft,7ceb210e49ade74e23101e10f006f110a0b6588c7c57777a6e3d98a38b749696,gDX:W:n4,gDZ:W:n6/l

@font-face { font-family: proxima-nova; src: url(data:font/opentype;base64,=
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
dsAk8t4uyRB+LrBBmCbfzryD5/6EfdVZ+AgA=3D); font-style: normal; font-weight: =
300; }

@font-face { font-family: proxima-nova-soft; src: url(data:font/opentype;ba=
se64,d09GMk9UVE8AADXoAA4AAAAAUtQAADWLAAEH8AAAAAAAAAAAAAAAAAAAAAAAAAAADesyP0=
RZTkF7P0dEWU5lG6IiHIFeBmAAhTwRCAE2AiQDhBQEBgWHDQcgG9ZRRaRntRcPAP8XCZkXrP749=
eef/34Q8P5Z8wLx50hH2CNYgS1Ugb29vJ8n3epCnATLzt6ZGz1n9I8N1AUsFWuJWFpbFIUoGUlI=
OiS0hBRSSEITXdGO2Na+3GKr2e0oW13d0t/kXvb258k2y7rOrprc5GQyJO7c/bG0Fg/tmEZTUWx=
U7fRdtlO2AbsddjssVcTSUFFWQeyxVNCedD1jEvsb7uMJ/8T/1DyWDCRrEVRVzb6w17VMQZkh9A=
fodYHMdQhdpLAK3mW17JSUXXZSsEepM/L4zcoLVscZKyTNvlx4/v876/c5VQ34tpik2+nukTJWm=
ko9mF/il8DMepN5kMqnXyuz/22HSWKHSKhJWNhEs3CdP7PQ+/OXqEPYG5xZhiRHzL3cG8Jd7jli=
eYoQNaA6Jc9YInlWnJBn7AnN5VGiNOfLcG991LadtR6ChSD3CyxQyBBCeAZMzc9OZif2y8+cODg=
fm153UDQ+IzNx6n1DmxdbKA6J4rCsWJIXRxRlXoP8kEFR1rjsQOnl0rAyCBSbgyBWWs/lyFjwpl=
tsqGUINBiw04vJTGfNjFyyQYOOXbrOmJof7Ni4YaPO+cKcqcl4YrpUY3JNqe/EqWlpcDKbz03L5=
+pIjRo0bFBP6pjJSI9lNU2aGp0WnTozOqUex67S7CrNFaWkb1IK/9nUGn1nZKYnC5mo1HfitOnR=
qTVBIFQkQNuITl4myIjDFDgMMVgGZ2EdpGAXYhWcgMVwBPbDcTgDC2A3TIOpsAJ2wiaYDQdhHxy=
DebAI8rAGOoIGkjALZsJ0mANpIVZDVog1sEKGoA3t2cwncU42Xq6Wn5e/UbRRbFN6lXHlceV95Q=
dVRFVQXVC71PvUvzRJzUttZe1RnU83WHdWV6xvoV+h/2m4Zaxk3Gn8b+pvOmh6bR5rPmd+YvFbV=
lmuW2tYl1lf2Krbztsl+077Q4ffkXb8duac910B12G3xh113/DU9Cz0Cu9Q727vV99o3xI//uH+=
vQFlIB64FqwZnBt8EAqGDoc94Vnh+1JAOhUZW8nUw3vX9f66j67Pmb5b+r5Iyk1qSLqfvDw5P/l=
sP9LP0l/af1z/I/2/H0APyB1wfsDPbxWmzEn9d9q/0lRpjWkfpOHACQONA2HQ1kEfD8LBswdXDn=
495PDQsUPPDP1rxJCGWF2D5OMj0HRUKk6ez8Tq5CFdUEvwvEyj12n5v+rkmoA+TOC8LBQMhPmdX=
bApVgdNMhq/pPFvEySIj4XONyEh+VvFIxgRkzP1peoaFZetVqtK+ZJgfHgJ0ZQG9GGuKhAIl/Il=
QXF4CVG88MY/YRpU9VlZKlXW7vqchob6g4cJjQ5xohoOCJIb39z4RgpJsY5MvVCToxLUKmMEk90=
riLnUa/Fyfq/HW8q7r0Yg2cdCUpd6oUaVI6hVxggmu1cQc6nX4uX8Xo+3lHdfjUCyj6XtoLwOq6=
9JxFviOiZk9OnIBNlVSKVKHSVlDrbSGMgzGK0GG1mM4ylMkF2BFKrUUeJwsJWGgEZvtBpsZDGOp=
1JkOqNRp/UZg/zHMiWupgbJdAaDXus3BPmobAW+RRXbi+12Nt+viwR8Hr+TNMM4CqSyFZhCFduL=
7XZW59eFAz6P30maYRz1oyzg9wcrDX49P0b2AFZT38mCPl+QR6WKUeJqChNk92E1RZeMVMdWRCV=
32oC+BZ3bpGITzGGgC0oa+x4mkCW/UHBG25iZWOD22j1cbbiq1mfzmd38qrNLaqa7Ex/LQ/qAdr=
9eryUz5PiGdfiUPiy++cfbv+whaJdnuJce3nwi0WW1OMxcrjZXMDqNXgt/de3jXW2FiUq5NqCvC=
gUCIXJfDgP973/7DYsHIZOZWb20rpltudL0tJzA/Ph4Zs2uRakmAoL8sbo5ezZLAzFc2auGg1eP=
XIH97zqFzkduwrqbB1tgfYvi/HX4Q/Qw3ymfpqTOnpo28N70V6/vP35JwAwKpsxR6nSyCu11v8m=
vt1psBTYSH/DXm5TdVmyzsXq/ye92O11OIvqhP/Od8mlq6uypaURx6frAe9Nfvbr/+CWJ/wFx5n=
7T5ZabZ1cp52xcOX/Bpit3CPyEceZ+0+WbN8+uUs7ZuHL+/E1X7hD6UkHzJnWsQ0vnk59VfgyTH=
inyRQE6M0cvHLpRcymxzFlaXs6GdWFBp7foC4lum3r1nk2rrq17d+6LxBfnX5z/iX2e8e7wtMnK=
oWtqljesIBM2TV/Wh8V/vpwL8s9uH7t8mSgu76s7v+wgV1sZidSvPrqjkY8nXGcenWt67zi5Nvm=
dna+TE7duXbNnCTc942IrD/PEDObC8ZxVynnbp+3g9zVqmk6w/z175iqh40ScqIYDguTGN1JIin=
Vk6oWaHJWgTiIvVzT+gBPVMRQk5z+XghpHMM5iZ5GTLIAOW6EjDGJhSCN0bIGOpMxZ4nSyIX1AY=
zIXWgpJOnZahymYymLqRUz5DDsRi8tr83KRQDjIk/YEej5/bgAbA6nrICUdOhFvgdlp4vIMWp2t=
1FZm51uwYyN2xCEsDtqKHRdgB1JkKy60sfmB/IjX6/S4yGfQ6SKkQCpLo0vsr4brggT6n8dfZ5k=
Ym8jkW0wG3tl/1A2qzG4rtXMGk1lvcVrdNv6rdUPXUVabzWph9X5zhcNZWuYgz2/Y+lMGjykQrK=
jwF5PCH1uXUkUOZ7GTC3gr/B6bx+rgh1346gLldjg9bjao95httuIiOxm1rPxHyl9qqjBwdBpQa=
thzDd4WJJDzX6mYDd8wQaNPR3AyzJNVGvz5eQZDPsF5OFmuMxp1Wp8xyMNkXCzT+g2hsN8fIrAY=
JsuDPl+Ip/HvvmrJTUiUwrQDzKWsdzKz9ql2Z1Wr3yl3l5aWEXu2kLU3N7Gw0G61srqg2ecsL3M=
4SdPxhubrLI0XYet9CRwGGxPRBfMILpDl6XR5QlAX4WGBLBIMVvM0/m2CBMlNSJDChAtMg6o+K0=
ulysqqVzU01Nc3EBqvmNSxLEECTbGhTNAQ1BpMVqONYO5fI6lie7HdzuYH9CF/hdvnJJAbG0mVO=
kocDpauMkTF01HJ1Rfw8oVUfB/aGBg1BZQ4GzOmohJH4cinmAEZMPsZZMBIMrILdtuABBWo2AAE=
ukG3c9ADFKA4hz2wG6HRXamOjREkMKNVCsETjPiV/GBulUpvsJktBHthX8pqtZvNrDqSH/F6HG4=
3+fIlFa+S74vk1R2IROoIXVgSFQ9GJWLlaaZaGxIIXpHBPOgHBP4J3VnohtQdlI6euGfJEmK12k=
1mVl2lrfJ4HW43aTzzXt197tHjbSOxHXbB9qhHJW+yFBoN7L4qTRUR+8iqQ6Fant5uiIItCvuin=
cW01qmfK16KxTCL+XPgtXnlRPHzHd9nl16zQA24h/8eOiNz5XJiLbCZzKy6Kj/s8ThcLnLmwpWa=
29xnDzdPTk3L7ydotcL6C64GXvHyh4c70icsWP2WckH92Y28y2p2mjkhX9hvdljcVn7Fux9ue81=
Bv68+AylP74Dxz8SpggR+aZWKh2EjU6MN7Sez4S/ZqcxjW/fuM+zXE6yOJ1GFFrvJzGZX59UQOI=
GsbF8kr+5AJFJHgL0nrwqFqnnMOMWgXgZ6+Jmi7YYonHkKk6KSL1rhdKtUPAFbGOiR/CFKZy3as=
3MngXy4JK8OhaprtSGBxyeyzOzsTB6PyPdWa+r8/nJPBTnaeDl0hfv6zuJhY+bMHTxjee25Dbzb=
anKYuVxdrsbkMLut/NKrD7O+54D99Tl05+kiQxROP4U5UcnVVvjouVRshE0M9B7wBDuNmLxw7W5=
S7C3xeFno2gJdgblxQpNzmBS4vXYvVx0OV3vtXqubP7duec0UDuePwnRUovIJjoJ5kPzlL5DIj7=
IzGSsn9MXE9b+0WkjLqbtN97m2h2sH8PT4SrX4OioRDbFE5kBupYbEOZmg1Qq5IW01D5/LsDjeS=
BUVFhUUsuqIUB+q9Fa6CVSLL6kyZ2l5OUsbDFEoegK5Ucm11g9h+AfPpeIhGM98NfFWej35qPbp=
lS9Z6IQdr2MCSrH9Muw07MnKj3JJumrivKEsyv6cBf+BrvCPh0CRNPiIGdMne5OVbHb3PvQZ++h=
u02ef3ts0g1TgQ2bqlPWj06ecf/oFyE81lZOmQpBtG87SRcYozHkKp6OSy8/ho1apeAq+YEA5DU=
bhPEweloSJ2PuHadCpLfr+xcOk1FxiMbPYdQF2RWbpjvDB3cRlNTvMnJCnEUxOs7uA33DhmvoZB=
/OfQzoo+REvmAXbMjYpuREzL/5w98pHv0Li+aR0D0/j3yZIgGOQILkJCVKYIM5kGlT1WVkqVVZW=
vaqhob6+gcTZdg2q+qwslSorS9qE/DtZLRZDgsxL9K7v7npVb/t1xdMk4YUwDf6lFjcKEjEbujH=
eAp/ZSeLtYLoohRlURbnL62PDWp/eZispspF4d1xOGQosej2r9ej9BUTsgcuoIqej2Mn5w74IT6=
fB9mvkRpgF+4bi/TQ7RewnE9wXA5a1Cxj8ehJPVvKOREyWBfz+EM9Rl3vgKyZgCRhc30d1h+VUm=
c1WYuPydQaNyWWuKORFKc6It8PplNlWYDSzmpDB73SWljmJ2AOWUX6XJxBiaexqggSxJCqB8ZBw=
v00qThWrmLbJj5AeM2v3ipXEarWbzKwQ0US8XofbRU6eOF93i/ukccNKvhcqjahg9wdnn6kKhMK=
kUh8K/gDLApDCYmo8JzP4EwlYNP0Y0M3wXrNZAPZ45xPHf3kivn1S8TxmgCgDU7Ez9MaFuAUX4g=
zchdOBwx4w+9Gz2lMtxFlWVl7OVphc1iJ7cXERyVw2f7+SwzH4BtAwAubDGJgIS2ECUNgR05HMW=
L8lRx057ir1lrr4K2ClykodZWxYFxTydaZ8OzGvpxQ/ndu//sRsDjtge2yH/Fs3lS/vtpy+eJJf=
5zi6pZl7/tUnMITH3EvMbiTUxt0rVs/gMra+e/f1R69+ajm2YZePp+9VqmFgVFwuSGIdTjPlxa6=
icoL54hPqkDEnspvblZOXbeRRE39CFRUWFxSy+6rUB8OhirCbXAEFBS9kV1BBadwhU5g7FDlQze=
NwmMPgSRn0BqTokyVR0ERhZ7Tzx63wsG1Kmz6g+FV8CrOYTxc8m+YjtwLNzc/Zn6Y9xkSCJllmd=
nYmHz8vzzyUfYyAXQb0k2d/8gqxP7zPzNu8dhLBNbAT1sg+OLN6Pq/4PYCXmWlr148nuAE0sEH2=
+dml83i61RAVG6OSq21SkcTGMLgEU7AnbsSNkII9YclPT87cuMa7Pc6KCrZGW73PZCy0WMmqjXO=
z53CYjFKgYCgMAym0g+Tb97PWNPJmt89WwdWGq2p8tgqrh39vxdQz/Tj6z5KoGIpKPm4Vk9qkse=
7QxsBC5CAJNxMcJ8vMzs7k4+flmYeyjxEYJ4PNwEEfWMSP6IJ90jARRxJMEkOQJIPR32Ai9uXpv=
SVR0ERhZ1TycatUjJxmqrUhgeBHoIHHsupQqLpWGxJ4fAw74SPZtfn9ZJ8Er+pQXqxuqFTDHf8n=
EiupGIm1Z96pTPwfyXWDfYRaeCy3RYunoZM+CluiEPTVm0Wc1SqN9YUUBv4jP5Z9KJOgSpYlaK3=
G7rLMTOWWsRz6pYms2/sPsted5S0e74mHwrUVdp/FzV9fNvH08HTDRZiGBDfjZkhDHhZBB+h761=
eeho6VargXhYuC5ONWkW2VxugTjPhKXpsXyVXl5eUSdMVZcF3bcPyVo/Z0QGTxAKxp/LNSHRtLb=
mukMOIr0bs3K40dDFERBAk8aJWKvWAtI057+pXmVHn68kWjN+wM1+UQl9VSZuEEzX7B5DR7rPym=
81e1LRx0fPkQknjaE1TXqmNjhBqh88etJfCGYovYdIzx2j0FboIuuAj7IUC5XA6vh63dH841mmx=
mC8Em/JqCu3LFitq8SK4qz2GFWih/8CEU40VKcdjs8RX6uAOhmiqeTi+Jiq+dN0rMOR1xdnRMbJ=
YR4o+jR8VmbdhVABPxLbV4Dd4s4fJhJWpbFeHYnhOM+EB+cteRrXuytTlGgkviW3GxuJU6aNwTy=
ua27tq1nY8/YOruVewSfXLYG2+kLA5PoYer8JR7HDzsExupuM9jMwV5AaRiV7V4AnpZ6dClSoem=
ub/y4VtUK48nimVU0KTxaLhduXtz+PiL36tWIBfpeJDSe0OWENdQXXeAp2FSil9GUd8mja2FNgZ=
WIgv98YdaiVfhfvi46kqoA6ugiggMXImmhONxo3AvPAKPHA29YByMfwZCGAkj/sBCPB6RWq8Yaj=
rAnnhuQ3DhJz7XyqXRwIt4gkUIp6SgosngGyF8cfcJ8Ngp4RHLVsxGeD7YYb7g/qkVEXzu9uVir=
nvVvH4hsOsEOrqaKLKXpxjFX1EZc0rGJjYTZy/s+ekv0ZTwublLUxJQxEPCoSmwFDC5Mj34mHfM=
InI3rFcnMK6rx5LeFrfB0RE2MbuGevM9UJ9OvodJ0s+oadhGqB0urZup8VdW2ovtejuLB8E24nf=
HoyvwiQinA0VTnJtPh4hly2ezeD44BKRG3cEd6Ag77ir9iRPWUHe5/fA1DaZudgqMFH1/5siDCx=
ekySEES8VLk8pKp+5kdrDNy+bWTWHw5yMicA+WeooLOfYZjhDFp36FP57z1a6mNcimKTQVMdmKX=
El1i+7KM/c2/8XAkit/PWfJHK9Ybw0D+sd8rknybbg7RlhNiexuFzhyAtcOS+XfSJZ8l/4v/r3H=
HPmY39UD3DTXe736vYSYjJyDP8WfRt4FEnG97pM++U//vT9EQuTvb2EmIi9rn/9H6BjX1aerN12=
dF8yUyvPlWoS3drfirVwr4dfIy2VMhjRbojXqTDoWslmDMpz10gbGJNhRH6h3siDnbhImq9FmFZ=
FwRAu9R4m5JmBKBEuulLXredfHdHVeIEsiVeXphl/C+3fX4aHcDoIyBHQydx4jlqukOhYP7d6BB=
3B1RKUuzy1hMmVisd6oN+pZmNn9iMixVcrqGaOgPuivsbPUekBcKfy7u5TIsQWldYxRUFftr7Gz=
MJN7SBgtRotFRJ7ziOEo9II6CQ9q4SM+9/ce2lHs0NkR3goHYQ1UEla7yeEQVUv8YnW+rkCDcCx=
24lgoJ8qL1DY1ky0X5xWZi6waFtbgIN6KDxBaTXFhkSgnIKtyOa3ldgQp0ADJuIEosDt1LqYqUF=
HFkru9YmjqhGuSoCQMah9TT7lHXf+gg3mBXLVKW6BBOAG34gRoJai7ziKlTc1kKcR5RWaNRctCL=
n5M4NKYrV8qhBx4TFhsJoddRBaVdmTn2RwBPlQBn88dFKU36xsBJ+R8hM1hLi8X1YsrxKh7YmRa=
qT8F3cJuH6EtMhQUiDKCeUHEzRCzXwdEqk9liMF1Cj69HNZyF6ydVIiLb6ThlBB6Tz02ZNF34jX=
xSKM1FBWJpH61z+4wW22ocX+Tt4W50Zq2lJ0sbE6JC0YyMybH448G/hz36HJ79dFDbGlpbimiFG=
KfNIhKhUG/v5KNuElToeTt8ZLlzMJVRy9cDB290XZSktzAklL11WQxt+gqLJKEdXZC2z1KwdWCl=
oaxE//GYZHRW5anIJAIK2T+vFyZLA91vxJK/LLKoN9fiZqEVGjVvnMbrzEQ9usfMIH9Mrx/9OwR=
UVF7DmciSBcerju37xzz59lZ/VlyhPoq1/sq7/g9Ppdwi66QeaSFhQatBqVv36RKZgZ/9eDdu0v=
3Xx3ao05vYDX2Mn05U+H1+x0Gu87GHkhbVTuPwYNH4h54EB78HPeAwbdDtQf2s7bwyUWqvrpGzH=
19lXf8HrR1DnsyNNLcK77vFiwRtqVE7VrKYGrSMDwWT/h1FIRdO7c3tI9NctHHa8TfdGJG9Kbvm=
JHR99+9O/vg+fmzGxLrWXKb+iLMaocpF3nH78ON23zODU7arw8YvAj4WbPv4E8YjIZhAvfHo14N=
hkHnoG9Da4XMpdJqiw06dlvqGsUaZtBXd37XsvBSUB2oqGLneWh8Q9BhOfnzKwZ6tEycb2RJ/L1=
XzM26Al9c5P3RyYcfuz6m937t3DxlWfRwlLZMKFUqpRKPMsCe6g4XSPx4GnHht4QBjydQqfRI2f=
n7BRfq94RQMKD0MV6v28+SeTj+Inx2het5VSsJO34PWjuph5zeQ3Nf+VDI9ULqeVtK9NzuKDwOj=
/91TBH2h/ayi4QDIlJmxax37UlFVq3GVMRIFQpZUbfp2rYzqpt6faDnCZjMRkBfOjEzOs0Lq9x7=
K9wldSOTvOIoBp6HtRO3A5mNNHwvfLM8NHReZGLyJgQ5P1cLOoUHG07vO8tcPpo1lcWH7j68Sa+=
YK5I8fhF28cWkTuoF9OwaQGfk5KSnV+fW76iu2rEjpzqdpZ4eeN+D5mZaYDIzHonjL35zj3tNqf=
vmWvU1pIlEmRoKZhB+uzlzLaJyMvN8ckYuV8k2n1U0Pzl56hlLzlbrCsxpJLBOEtbZWQoMlcOlN=
NIOg0NnQ/g/sAGmw+yZOLqskPmlRYV6rdbGjO0EN84eb0R9z8P6hvY74YP7MBunEVRzoX1sUu0J=
+i0aa5XOzvmMjPOJ3ldI2BIIrqVMRYWtnbCtkwp1/bv9uCl8vjo0aeHSNesy0All4qG5zIKl8Vs=
l7CFfuxmhU0g9PFjXui/EfF+X8i2LT9y/lO4ID9S27TvBXKxfvMlEDgTtHJZO6i6X8WV7Qfhm+c=
mh86PArjskpJotPbG7B3ec3neOuXwkY+pgcmAUKVaLlOWBjvt8rgp0NPQfBwQehoeNS46G9X+CB=
TAMhj0BAfRHs8OHx0waPDj6l7/+PPvLq1dnJo1ApBh/KYZFpCwcWrXep55ztf9OdMKkPzC1+LuN=
qzaiwzB52OC1MI9ULLNEuOzg2a1XGKB++RPGs7PD+0fPGhkVtU/8jdsupJ6vZG/d52dnWzi+elp=
J2NH7cLKTauY0eCzNvfbsmIlC6m5o03d7F6dDMiHiLyOAuny28dRBzCWxueARcIhOzIra8B0zMu=
bBu3dn7j8/f25jYi1LYp9XzM24U+yaW00E6KgLcINbTVfKvVJE7Y9NSEjdzraEra1PXlmCjIIsg=
pYpPiwv7Go5XhUy96oy+gNVIhJ/pr7A0RfC9pfBu8Dn3FQQ0RCFWxe+FR1p2n0ldFSW3Yh0Nnux=
nfF53H6HwaGxsfsSVwQXMli49KsIlnqBF0PrLdxblJC8ce7ylcEdG5FVozEVMXkKpbTQUmTXsut=
OXJReY6Dv5csPWRK3qq/C/6/wfuvkw8FG2q/wyJBaoVExm+V1+1houyUMeDyBSmHn/1LgnHmGiE=
c9fF0wf1/SzSPHnLsQmajO3dyKYp9DcyKRcLXxPWFKeuymKGbp+tofWWi6e7UuCQe2rXpx6/sDh=
/ejNCGVF/fYYPHza4Z53FYunq6U+XMVykKlFuEx3Z/isdynhFerdCiYXLk0T2/UmfQszOkeS4jL=
KpXVjFFQG/QEy1iYw40lTBaj1SIiYYD29XQxh16USsIoa1cCt5KukPvFckWBQodwz+4e+BP4QPi=
1CqeMkSjzZVoWf4I/4J5cD8Krk5fLGbEiT2Yw6o0GFvp1TybybH5lkDEKqio8FTaWWg+94T30xu=
+JPFtAGWSMgqqAp8LGQj9uMmE0Gy1mEdnfI4bEFxAj4cHKJ3wuegdtL7brbQiPhNWA4BvCajM57=
KKAzJ9XkK8r1CL8GV6AaVhIlGkKLAVMrlIi15i1Fi0LLP4Wj8CrCZ22WKMR5fnlAWeZtcyOoD/E=
Qn8cSxTanLpyJuip8LHkYBx/bSd8ww2V8LitXDxdKfPnKpSFSg8t4NfdUVvmSZNz1NuM/YqKjIW=
MTK6UbNldXHfxZMP1hoKl2x7ffXjhf5RehjdXeMdfwJxXfG7OHtqv9MgQLhVAALoIq93sKBNVyb=
0yhL8XNPispEaAvfgdodPoCwtFuV55BYKrAn8bUFP8pZi7sXxh56HHsN+pH2EOt5RuyKrbti0rc=
3sVIKk5M4yIul7Y/YAuVXJTSpG/ROWWMXkqlayELVV1TylF2SVBcT1TXRWsKWHJEVPFXTMkgqwK=
dS5qwm26QuqWFRSpRvqZWZnqLYZenFC4S19XUJfV64uUjff5AvYMxQh2096kqm+tvUJCr8qtkKp=
UChQvxP+UzRyMw0X4i4eD4Z9t0V8hFW5VwOt2e9FV4QXroaq9e3vZbCaHQ4TXKenZgYRbT0VPWm=
7eDyAyQtWRfh1mnoIDN8Jafj3cQYU4UwsdzPXmIfH2nDSGUsRkNH3FSCV6nZJtath7+ILIZ/Do3=
eilwONyeXxql5LF4YJNx1YfuC16cLXlzrGD2VvrUH6ZW+tmqvy+SnuxXW9j25MWNc5hMDlkMu6x=
sGnNvkR2ikCpVivlLrWHhb6CMqlNkitanhK/MA2ptVqVSiTxqgJWq9FkRb7de1z1DBXq9Kz5jTl=
9p+ogS1qfXoNn13nn78Ldu3yuDXrQdoNDa0Nxp4iGJv/J06J2Weu2Q+j0acKW7bYl9ciLNIazJz=
aWaEhd6Y9molbJtqewsacJu0ZjLmTylDJ5oVlj17CnY4ltyfIVcaI4X3xDEoqLI7TaeJOA0ucgt=
qdT2yli+8ET0vPMuZC/4SDbvpzQ2hwGBxPw+n3saMimJ8TMGDgo+tFvv559+PrNmZkTEbkbyLZ3=
rfB7GUUFGE57a8JVLH8H8srxrD2+fKeSxfECiIbGEkiqSjF1TRprnWjcONeKyvY9gbw/ltWvRwX=
ZZEFWhbymqoTzvOhnkAvdLpeHJbvDjGK4LuHda+dDPzsNPqFH7VLK1Golwj6hwqX2+lwuL+KYnr=
cLSOK+M9u7mNO8Q/cht4PPTb1CX07bGxdEF+obm09nHV9KIoAQhZobLx05odi2F+mt1mIb43N6f=
IfG7p+FBZHfzI1s3ngjl/1OHpe0AC+E1pv4U1FcwpZFMSvrGjYji05j0jIylVJWaCm069hNTafS=
HzHQ896pp+xcKKJXb0tfnoPmBxb6zoiO1O75uQq1K89KokUk7uBOPeUpnwLxX/597gVdKw5mZYr=
FWZlBcV1tMFiHIDm8NjeYlZUrzsqsEtfWVgXrEAnf5De+2A3vd//dyDvaCB/t5ySN/K4s+JmGWD=
wWxuJYHIPH4WMCXY2DGIiFsRAZbQ3Hc/EAPOBoODqHATAX5gK994mL8Gw8iC4vcBTp9MUGA9qas=
TYvkZkw884b+Ojhrd8OH5VtaWD1ZkuxhSm3l5VZSiwGM3tg06pgLIOFY8djEpNPx4Hw9PHKA/tZ=
s9losYpIvAVu75OJYc7+e81hTWdhyhlKATfgBQ3Rwoff7Vy0NlG5dSPS6Yu1OpHaVeC0WU0WCwr=
W7ixvYI7sy05i44S12Rv9CUxczKZFS86ktbfs9dfVsCohFZK3t18IYo7R2dLNyk3Mui11hw7uqj=
+6Z7cyO8CSeOxdMSeQ8Npan7TyoeBH2maw6a0I94UB0BcQYbWabHaRT+5UJb5HKR3CfXA4ka/Wy=
uQiuU3uVCPog/sRWqvd4GB8bq+HhcHhZGAhtoYKl7Kr3pgm1CqdfMBWuUu1UuREEIshoY3HTWrn=
c5tBQcOM+ui53zc37bgHjhDEY0tHgAwLYQeNFwgkakWeNFuwXiCocHsrArrHspPDu/7VwNu749U=
u4O/+pYHPreNSaegz5r/tK16jxxx18Ww09IY+/332xQFtDx86Y/rQITMev3j56OHLF49mDkGTjt=
PNGxqS0HyBQq1WsDhZWGTXOMrtdgf6+ajwwhhCb7YarEy5o9xhLjEVm9n4O4SnJXCK3RyelZMnR=
kt+uyoIVudlsCSWcddbePCB+y/tLihXIXxDoCooUCnKC9ws3BC4y8u9LIlPcwtbYHgLrzoEw1r4=
UMm10lfj2hcvWRa3ZPGpZVevtZ+6hhLCkzZtTkresrvp0K49h5r2bEpG5JjSVqhthU0SHmSe6Z7=
R+69N4yrFbTt8t2croPEkTuRmhOBCKAx2nS91UD/C31ws7cp3qhH+VgB9fnx8+6Ho4cL98xJWKj=
anIa1OuRgvdxe6YjGsdfb5DhbycG78N/9ZjAcOYQs0miKlSFVe4ELgFFDXXU6n1yIycRzbAp99f=
2w3nF9+nnoKf3D19KXonalmRL04aD+x46zoSlTT1Lh10i2bkE5v0GhFSneBy2o1Wiyobsdu5z4m=
dCgnaXWiLJZVCvKVRXKZV1POegXU07PHpPHrN2ZEp6V4a9NZi15r0jGKfKVqw09bLjw923KNJbv=
53DUxjJPwIKZrNu1ROtUabbFOh3AfLCD0+hK9TqR2FpZbLCazBUEYfERYLWa7TUSm4xjQL728Xs=
wZJJrspernjgfp9rlrH4ngqTo77A0xzJL1ux4kLra4xGCZV2d6duaeYS6eOXh8D0vNXuA9pmxla=
sr8XvU0GTxV3LW1mQcJzb828zlyKt21SlidV5GD8L8Fo+fMGT367pxnbPdoYX55gctdXu5EXSt+=
fb/iUmgSf4AY4PWT8QfDXGE7aYjU/QWOPXi3sX39zWCTm/mQiPl0U3pdqkqp1xSgwDHCaCo1mUQ=
Ojb2wBKnURWo9K1lOlBSXGopF+WX5LuT1+vxMrUspztiu2JKbbfXmsCZDcamByS8ozE+/oDp45n=
hjiCXx/7glYm68hAfC83yYz0XR8D+hW+2SKwo0+flo2lRCpyvWakUKl9pts5mtVtTWTuBWodyt8=
gXcbh8icRTcbAHFCd6h85B0js/xOAn9+zcdQ4d/PXf8+O/n/vXiYsfvKCo8MjU+cmnaySuX95+4=
fOXAyqWIxGPvijmBhAcxrU9a+aADPe3T+dRuhHsDTdi0GnMRI1MrlVqz1qJjoS9GuC8eQOh0xRq=
tSO5Vexx2s82KoA/0I5xum88ngsEltE/ry3cj3AfCCZtWYy5iZPkKldaktepYMsS74iQs9Irfhr=
igpEYSBsLz3DfnqOddEghLb0FJsK0xSD8rW1YkViI8HGcSmvyiAnVqIs6gyDkCz3HwK3ebhAlLB=
0/lamjqobPQrdAU6TsQ1hvznoahnjPfTaw3nmO6PiOo5yazyWoRdQ/FH+iwWHXuGzyAxv8SwL9g=
FUHC5tJQuhi6QlDpmENacZ460mWrkxu7T/Lg3LXywrwc9jiqS0hT2x3Wl8RBJBwIEV/gCyYfi2Q=
9gXFh56i3+V2/Bg2mpXqxLJPxM7xTFG7of/nz7pEwNiNZBm62rvx5R1wYlgSkNk7A8R2cCXrwGn=
+6Ii3qHuMizUWpBPgAgoHdNXSl1C9FG1csmsPMTjlygn0LkU6gRAHFlRSxWiZHCo9cOQIvV+FRo=
ikdi4C8AajpMiLxbu5ky9EWHlzuGkc7NeUqVX6hqgSt00kl2QmGJ/OZ5etXLy5wFLrczjK3kT1q=
DVTWtJjG3WbO7D521caSpZB6hcddAT0dUHqkqDtXIFUqpRKFwJfL7RDoBZoHa3Wd6Od9as2uVA3=
8gVvxBj6W8I731akzjTOpkmC6TtO5I6q5vnJnTVUvq1XYj/coy/M1Qh09Stq0LXa5KGFn+u6d1T=
IzFv7AbRfDx2+6N27O3J+zxjpuBeTw2qDXUTLr9yNOtmc8OZz54/E6biXk8OBXtrdnPDncoVXxP=
yueT+NuoOs32HsyqIGBLbxbsJUPTaCjz60KRUWtWhUVHVp17lwodBaRzzuNWvPgH9ADPonuPl82=
54vI5jXdtfYM8vCdmdcd6jZeFt6tazSJT2rb6b840/SEmHkP1YGOzmjuppfqDpjf+lsrzO3g3fq=
Jz03qmknjyfjzkXhkMrtJA7w6NYISRYlcIVIYFUYlyr55SfYI8OiD8PlImML0wum/SlaRe6SCsd=
ffbmRhf4n5aocExZ4Sr1fkM3pNXgSh25fX/YI3+55cAwFz8UpvHTatBUbLJnn8IvVi2B+dMK9hY=
Js7ObZ5oZf3rA4O4zi6cb05fVpszDBEXUlbJixR0AacVrkBRbDCuXzhhCw8Tp2DCZR5Kli2VPji=
ol4yuX7XfrMuF9b2m+32p56v6YOLGP7Atfz+SsK79hf/Gvd/en1t9o66ymBdrbQi26ApKSlBppp=
AQ1Wwl8VsslhFVoNVb0YlRsKi1xm1jE5brNezW7Zlr1stIlVuTuKCCKcAx9uEN/vc+9iH/3Tu99=
nZf/rNy9mO21974E7kQWz8F6bocIeD5Ma18VxzfU/ubL3sIMTe3p1ZpJ7LLuOT98l7nk/fgXwXm=
yaJzZwu/vJaCkP4MEnq2r1zc9L22t7OjVW1OzdW+SrydxU11Lf0VDUvX1y+c0dudU1zfummcl//=
xpqyqt2fb/1aaefGmvU9VTWdO7y+4oad5c9u7V7u66/Z2LBjg29d0/JN/Q1fbCktrOmu7W8ofq6=
1wte3vKLzC75VqyAJyGQXr2Irr6xvJ6dr81c/z2MkA0juL84TJPs2VbjwNDTVu1jS2tTgIr+9tc=
7Fyud40nFFW0V7xeToKaQ+t/3Ln2fBkbBEyBOKhNW83L9TAUqZhkx0G5mOGyQ5r/H7P5NdxUFeJ=
cg8d5JsSXuTvmO7x+a25dsqbc22TbYrtrv2B+w77AftZ+1/SV6U/HKKLWVDym9SPkl9KjWYGk4b=
TH8ovT39bsY9GaUZRzP+lEnmdzKfzwxn3skqyerK+kXW+9mLssuzO7NPZ7+a/Wb2vOMRR6Xjq47=
jjr84/u14nywcsnAqgFs/wiMLQxaLdZ5cWeTJolEmgwowpADJePU7CjVGka5Qogtk4ZCFUwHc+h=
EeWRiyWKzz5MoiTxaNMhlUgCEFSKKCz2PDrZ+yWCd5GrvipCvAvZrmPr3Kw5rmEV3Eq3MUyKRQv=
6ZIo5TIz2rFWaM4axXHp48oVZwKDGoVp15xmvQRLRqlVf+lXW+wXnG2KkCvAvQpQL8CDCjAfn3E=
AX1EMoUap0hTFGucEn2Xp7GLp/wcmsapaQY1zZCmr+IUTuHUOp16bpoNr8bM3JfO1vZJ7JohXaf=
I0k9x6TU8msTQJIvJIPe4/PM0Sb7m8WqUAs1QqLcp0r8o0d/x6TZNukmzbtCiKK2ao33oeqtO0a=
kb9Mp9Bv3yANZuv25zQLfJwq5bpOsWXs1RqBhFuoVAk61o1qtb9KEfA3ml4JKFWxaFukvREL1E1=
3kAuybpaDsUwakILl3HzX0kRfEqQqG5rosUpVgmJQqxQnN2TBtUhKHxpNJI0xgOjeE0i3frGot1=
iUGNMaQx0jhhXm6EBCvmKPA2qQYz7/8mbs2wWDcYlMmQTB4nR7N49DaG3iZXb5OntynRLCs1x2q=
FWaMwaxXGpxlKFaZWYeoVpklXaVaUFgVpVYg2zdCuIOsVplNRujRGt8bo0Rj7NcMBzfAp7JolTX=
HSdZgsteLSN/AojKEwuQqTpzBe/YwCRSiUnyJdpESHWKl5VmsWmJVnR8xiFrOYwjze4JPxFLPyY=
Xxzm6dXh+nTYfp1mAEdDh88iNjSniVHYZw6i1uvsVjfpVi3KVnKc6WirFaMNYqxVjFKFaNWMeoV=
Y71idClMt8L0KAycfbed5ZVStTVJk0V6bMEtGrv5dR5hwoQJE6atSaMSrE8BsGDBghVskY47rdg=
/QYlu0aQ5WpSgVRZtitGuBAtJ0zAOnSNHQZw6x+Ma44l4vLyjeBTBUITFeoFcRchThHw/wxkMY/=
jV8jA+TVOqYao1Qo1GqNUwdRqhXsM0aIRGXaBZI7ToTVr1Jm26SLvepEMjrNcwnRqhS0G6FaRHQ=
QZ1jiGdY7+mOaBpUnFoJpXIzyCvIA75ydE7OOXHDdmD4hqKsljnyFWUPEVZqb+zWkHWKMhaBeWp=
/YNUa4IaTVCrIHWaoF5BGjRBo67SpBjNmqBFMVqVoE0f+dy0Dk2w3qxupybo0jt06x169A6D8jM=
kv7ydtoA0hcaLP0qOpnBqFLf+xaHp/xBCCCGEaEyUQ4BJQ1wOgYa6HAINef5/wOQWd7BgIgQTU5=
jCFEYxiljhYjjJ0SQemRgyyZVJnkx8MmmiyifzlOJM0qVxujVOj8bZL5MDMllEmvb5vHCy8I/rE=
k/oEm79HY9CGAqxWN8kVyHyFCLfnTiCfdiHfbiMffDDj33wYx/8+BlmuF+WISj8/ubukJ/12ken=
/HTpJN06SY9OhgIuB14m2WAOc5hb+jmysStBuhK4dA2vvkehLlK0rH6JvsNWJehVgj4l6FeCASW=
4N9dZOofiOBXHpX/j1TCFClKEQ6dEB2nTZApHnMXttqRuCfgIL+EaPlrnv6dg93vf2nKW5uynnO=
On/B2s83coONkd04MNAztl0uUnLykjk1qyKMOhcZwax0Uxn8bgMxgswOAZDBZisAiDJRgsxWAZB=
ssxeBaDz2KQz8N4MSjAoJA1FLGGYgxKKGIFBlspo5cy+iijnzIGKGNQ4wxpnFRcGsGrEQo1QZFM=
SuSngmVkYw+fFNJT7iFHkuLP/CO/li9CggQJEiRIkCBBgoQ71xbrZdGlCN2K0KMIX1eEo7dl/Ho=
LUEqhf2adgUMv4NQLeHXFT3kiBy3OGIN6gSG9gAO7oqQrikvjePUr7Zdf1XaW7xxbFaVXUfoUxY=
eOdr/lGPdbjR8v43P8wg7qbcnwMiOeJPdbOUrzWP68/kd1KYTdn5ZzlGP8MONtytwfnqbgbz+Jt=
w/8bRJocx+NH7gPYYQRRhhhhFm4FIKn+XPanBMXPfobz62b51yRxlIgBbTmb5cqaKkn+BpER0p7=
110s+TQwjwmu5nl+F+etZK6mYTntHeKNt3GJ6m3MgapkYNUnjCOGuDUogYTyW6FIIYo00ogll1z=
iyKeQeMqoJEnCf8dGGvU0koGXbrLpYR5lLGAxlSxlGbWsYAv1bGMbXYwxhp8JJujGwaEHRTmcY4=
HjOZ4YaklozY8E85HQIDQLncK8NAKzj1vEIuS3rUSTyMmBSzjFsOV85bYQS2PkQqJAz9btgw8B0=
4bsJVMqVSUq2pqysK+BH9ZjVrFZssmJUIgFmEi0fu9Gg3WB5BuwSxix/kqvxWBcbA5DuueFXI5+=
Gsvfyp1bgCoMNtHs5Giu4TE9YDJNnik2ZabK+M0dESIS0YgVsSPRC60ryzjINVyrB0yGyTWFz/a=
w6/GZe8gNu0H3nv+uivRH9kf2RnZFtkeWHXzHlJtK02z8ZpVZS3VcUpvAaPnT7I5x/AFoiAdZ2O=
F7jhNDLHHEk0AiSSSTQipppJNBJllkk0MueeRTQCFFFFOCoZQyyqmgkirNJbCO+uWebaQJD158N=
NNCK22000EnXfjp5uKke+hlHvNZwEIWgS1JBVj+LchKVhFgNWtYyzrWs4GNbGIzW9icucJWtrGd=
HexkF7vZw172sZ8gffQzwCBDDDPCKGOMM8EkU0wzwyxzhD676e2MkIK4LinpSifmx2c+OLN4X0r=
Pb7GW9eUjE165rGjmOKNLT7nMDf7/h11qnRPfuVK4trEu+P9zsDe4QTdol8Y5q9PkH9bKG/b8nB=
7ZRruupVA30KJhSvQkKniOdv6kgT/Jks1UyC/kLEoDucdG1hCjA7TIJop1NY3aSKU2ka9rCeg6W=
tQiT5fSquvwvWN+b9Qv5OyXJltepcBKoVwvplAPY63egGkPs1a7gKouX6BFn2ctP5yIhMnQHayV=
/4cqVm1VfXrGf7Ro4Bj7bVfhUT/5dNb2YgqtEPl6Ll6do0ZXUqcpeHU+AfkBD+p4tKUNKSBe5+W=
jNQQ4xDwOudeongcErBpU0er2tAeP9tRpkFVR5A0qpQr7vqZ8Tbp+RI58Tq2ZIO/T5FZqzzkTTZ=
JupUbnSOUt1srb1Eiq+7MVT4McTa3cR5v8SY40UCzfUy7jIGV+tDyn0iCn0sjH5GgbAXmCAn+03=
ysI35Apl1Ej9+G3lEyrmkxrikY5mxLpQnQDudbCcGIefoJPp01OP267R4ZYoXfqVdMm1fj1PvLk=
P+L3w0d1Caznc86mkMqzsWbuDhk/Ko2Oc1GJYYVo0cg60SaNY8UocjlPjCaHG9VkfDwsjT3tuHX=
UFN8ZUSiTXaKSLMeJFjvlHNGmTD4To/BqjBhNk3a8J5Lp08HPnHOcKBGnadP5zSfTMT/5pB+53d=
k6OBcanZ4yviZvi8+snw45m/rnRmecz+O7D4w4zozf43GOmhkcH3Wa+qcnPYOHTQRDHu/G1tfR2=
tLPYgGGo9ioaFMcTHFx+WsxrCHIHOMYNjHKJNNMEToKbsDQLNBtvTRhWKiQzG0osdCVvAcJMcgc=
hzPIAE2sX5RpjqTYLIhhLTv8DJtOagiHjQwyzGGg9jtxkeQCfyrpzc+sc/s5TyUFtpV7JcSorZE=
NPprw0mKo/Wxa4Cub6He3PLMkQdVpcVrm18gP9ae8HGbw48GDw1HMDJHHGcWhif51xiQeBt9hoe=
wz1dssfHTQSgv9tPXtonsamXkFAAAA); font-style: normal; font-weight: 400; }

@font-face { font-family: proxima-nova-soft; src: url(data:font/opentype;ba=
se64,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
rkIZ6W6oudeiqiglBIcPAHcXn0t0TUIAA=3D=3D); font-style: normal; font-weight: =
600; }
------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.chartjs.org/styles.css

html { font-family: sans-serif; }

body { margin: 0px; }

article, aside, details, figcaption, figure, footer, header, hgroup, main, =
menu, nav, section, summary { display: block; }

audio, canvas, progress, video { display: inline-block; vertical-align: bas=
eline; }

audio:not([controls]) { display: none; height: 0px; }

[hidden], template { display: none; }

a { background-color: transparent; }

a:active, a:hover { outline: 0px; }

abbr[title] { border-bottom-width: 1px; border-bottom-style: dotted; }

b, strong { font-weight: bold; }

dfn { font-style: italic; }

h1 { font-size: 2em; margin: 0.67em 0px; }

mark { color: rgb(0, 0, 0); background: rgb(255, 255, 0); }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { border: 0px; }

svg:not(:root) { overflow: hidden; }

figure { margin: 1em 40px; }

hr { box-sizing: content-box; height: 0px; }

pre { overflow: auto; }

code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

button, input, optgroup, select, textarea { color: inherit; font-family: in=
herit; font-size: inherit; font-style: inherit; font-variant: inherit; font=
-weight: inherit; font-stretch: inherit; line-height: inherit; margin: 0px;=
 }

button { overflow: visible; }

button, select { text-transform: none; }

button, html input[type=3D"button"], input[type=3D"reset"], input[type=3D"s=
ubmit"] { -webkit-appearance: button; cursor: pointer; }

button[disabled], html input[disabled] { cursor: default; }

input { line-height: normal; }

input[type=3D"checkbox"], input[type=3D"radio"] { box-sizing: border-box; p=
adding: 0px; }

input[type=3D"number"]::-webkit-inner-spin-button, input[type=3D"number"]::=
-webkit-outer-spin-button { height: auto; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

input[type=3D"search"]::-webkit-search-cancel-button, input[type=3D"search"=
]::-webkit-search-decoration { -webkit-appearance: none; }

fieldset { border: 1px solid rgb(192, 192, 192); margin: 0px 2px; padding: =
0.35em 0.625em 0.75em; }

legend { border: 0px; padding: 0px; }

textarea { overflow: auto; }

optgroup { font-weight: bold; }

table { border-collapse: collapse; border-spacing: 0px; }

td, th { padding: 0px; }

* { box-sizing: border-box; }

html { font-size: 100%; -webkit-font-smoothing: antialiased; }

@media only screen and (max-width: 768px) {=20
  html { font-size: 80%; }
}

body { color: rgb(51, 53, 56); font-family: proxima-nova, sans-serif; }

body.sidebar-padded { padding-left: 240px; }

@media only screen and (max-width: 768px) {=20
  body.sidebar-padded { padding-left: 220px; }
}

@media only screen and (max-width: 500px) {=20
  body.sidebar-padded { padding-left: 0px; }
}

.homepage { position: relative; padding-top: 120px; }

.background-chart { top: 0px; left: 0px; position: absolute; width: 100%; h=
eight: 380px; overflow: hidden; background-color: rgb(231, 233, 237); }

.background-chart canvas { display: block; margin-top: 5px; }

.content-overlay { position: relative; max-width: 800px; margin: 0px auto; =
box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 2px; padding: 30px 60px; background-=
color: rgb(255, 255, 255); }

@media only screen and (max-width: 768px) {=20
  .content-overlay { padding-left: 20px; padding-right: 20px; }
}

.documentation-header, .documentation-body { max-width: 1200px; margin: 20p=
x auto; padding: 30px 60px; }

@media only screen and (max-width: 768px) {=20
  .documentation-header, .documentation-body { padding-left: 40px; padding-=
right: 40px; }
}

@media only screen and (max-width: 500px) {=20
  .documentation-header, .documentation-body { padding-left: 20px; padding-=
right: 20px; }
}

.documentation-header { padding-bottom: 0px; }

@media only screen and (max-width: 500px) {=20
  .documentation-header { text-align: center; }
}

.documentation-header .chart-logo, .documentation-header .documentation-tit=
le-wrapper { float: left; }

@media only screen and (max-width: 500px) {=20
  .documentation-header .chart-logo, .documentation-header .documentation-t=
itle-wrapper { float: none; }
}

.documentation-header .documentation-title-wrapper { margin: 1em 0px; paddi=
ng: 1em; }

@media only screen and (max-width: 500px) {=20
  .documentation-header .documentation-title-wrapper { margin: 0px; }
}

.documentation-header::before, .documentation-header::after { content: ' ';=
 display: table; }

.documentation-header::after { clear: both; }

.documentation-body { padding-top: 0px; }

.documentation-body h1, .documentation-body h2, .documentation-body h3, .do=
cumentation-body h4, .documentation-body h5, .documentation-body h6 { posit=
ion: relative; font-family: proxima-nova-soft, sans-serif; }

.documentation-body h2 { margin-top: 2.5rem; }

.documentation-body h3 { margin-top: 2rem; }

.documentation-body .half { width: 50%; float: left; padding-bottom: 20px; =
}

@media only screen and (max-width: 768px) {=20
  .documentation-body .half { width: auto; float: none; }
}

.documentation-body .half:nth-child(2)::after { clear: both; content: ''; d=
isplay: table; }

.sidebar { width: 240px; padding: 0.2rem 0px; position: fixed; top: 0px; le=
ft: 0px; max-height: 100%; overflow-y: auto; border-right-width: 1px; borde=
r-right-style: solid; border-right-color: rgb(231, 233, 237); }

@media only screen and (max-width: 768px) {=20
  .sidebar { width: 220px; }
}

@media only screen and (max-width: 500px) {=20
  .sidebar { display: none; }
}

.sidebar .sidebar-section { padding: 0.4rem 0px; }

.sidebar .section-link { margin: 0px; display: block; padding: 0.4rem 0.8re=
m; font-weight: bold; }

.sidebar ul { padding: 0px; margin: 0px; }

.sidebar ul li { list-style: none; display: block; margin: 0px; padding: 0.=
4rem 0.8rem 0.4rem 1.2rem; font-size: 0.9rem; }

.sidebar a { transition: color 120ms ease-out, border-color 120ms ease-out;=
 -webkit-transition: color 120ms ease-out, border-color 120ms ease-out; col=
or: rgb(75, 78, 83); border-bottom-color: transparent; }

.sidebar a:hover { border-bottom-color: rgb(54, 162, 235); color: rgb(54, 1=
62, 235); }

.hero-container { text-align: center; }

.hero-title { font-family: proxima-nova-soft, sans-serif; font-size: 3.75re=
m; font-weight: 600; margin: 0px; }

.hero-subtitle { font-family: proxima-nova-soft, sans-serif; font-weight: 4=
00; font-size: 1.25rem; }

.subtitle { font-family: proxima-nova-soft, sans-serif; font-weight: 600; f=
ont-size: 1.25rem; }

.subtitle__small { font-size: 1rem; }

.description { font-weight: 300; line-height: 1.5; }

.description__small { font-size: 0.875rem; }

.footer-note { font-family: proxima-nova-soft, sans-serif; font-weight: 600=
; }

a { color: rgb(54, 162, 235); text-decoration: none; border-bottom-width: 1=
px; border-bottom-style: solid; border-bottom-color: rgb(54, 162, 235); }

.fragment-link { color: rgb(51, 53, 56); border-bottom-width: 0px; }

.fragment-link::before { content: '#'; color: rgba(51, 53, 56, 0.0980392); =
transition: color 100ms ease-out; -webkit-transition: color 100ms ease-out;=
 position: absolute; left: -1.25rem; }

.fragment-link:hover::before { color: rgb(51, 53, 56); }

.button { border: 0px; text-align: center; display: inline-block; padding: =
16px; margin: 0px 8px; color: rgb(255, 255, 255); border-radius: 8px; font-=
family: proxima-nova-soft, sans-serif; font-weight: 600; text-decoration: n=
one; transition: box-shadow 200ms ease-out; -webkit-transition: box-shadow =
200ms ease-out; background-color: rgb(231, 233, 237); }

.button:hover { box-shadow: rgba(0, 0, 0, 0.4) 0px 1px 5px; }

.button:active { box-shadow: rgba(0, 0, 0, 0.2) 0px 1px 3px inset; }

.button__red { background-color: rgb(255, 99, 132); }

.button__blue { background-color: rgb(54, 162, 235); }

.pill { padding: 8px; font-size: 0.875rem; vertical-align: middle; display:=
 inline-block; color: rgb(255, 255, 255); border-radius: 8px; background-co=
lor: rgb(75, 192, 192); }

.pill__new { margin-right: 8px; }

hr { display: block; max-width: 50%; margin: 40px auto; border-width: 0px 0=
px 1px; border-bottom-style: solid; border-bottom-color: rgb(231, 233, 237)=
; background-color: transparent; }

.table-wrapper { margin: 40px 0px; width: 100%; overflow-x: auto; border: 1=
px solid rgb(231, 233, 237); }

table { min-width: 100%; border-collapse: collapse; }

table td, table th { text-align: left; padding: 12px; border-bottom-width: =
1px; border-bottom-style: solid; border-bottom-color: rgb(231, 233, 237); b=
order-right-width: 1px; border-right-style: solid; border-right-color: rgba=
(231, 233, 237, 0.498039); }

table td:last-child, table th:last-child { border-right-width: 0px; }

table th { background-color: rgba(231, 233, 237, 0.4); }

table tr:nth-child(2n) td { background-color: rgba(231, 233, 237, 0.2); }

table tr:last-child td, table tr:last-child th { border-bottom-width: 0px; =
}

pre { margin: 2rem 0px; max-width: 100%; overflow-x: auto; padding: 12px 20=
px; border-radius: 8px; background-color: rgba(231, 233, 237, 0.4); }

ul li { margin-top: 0.6rem; }

.chart-logo { margin: 1em 0px; }

.hero-button-wrapper { padding: 20px 0px; }

.hero-button-wrapper .button { width: 180px; }

@media only screen and (max-width: 500px) {=20
  .hero-button-wrapper .button { width: 120px; }
}

.feature-text, .feature-chart { float: left; width: 50%; }

.feature-text__pull-right, .feature-chart__pull-right { float: right; }

@media only screen and (max-width: 768px) {=20
  .feature-text, .feature-chart { width: 100%; float: none; max-width: 600p=
x; margin-left: auto; margin-right: auto; }
}

.feature-text { padding-top: 30px; }

.feature-chart__left { padding-right: 20px; }

.feature-chart__right { padding-left: 20px; }

@media only screen and (max-width: 768px) {=20
  .feature-chart { padding: 0px; }
}

@media only screen and (max-width: 768px) {=20
  .feature-chart canvas { max-width: 300px; margin: 0px auto; display: bloc=
k; }
}

.feature-small-container { margin: 0px -10px; }

.feature-small-container::before, .feature-small-container::after { content=
: ' '; display: table; }

.feature-small-container::after { clear: both; }

.feature-small { float: left; padding: 10px; width: 25%; text-align: center=
; }

@media only screen and (max-width: 768px) {=20
  .feature-small { width: 50%; }
}

@media only screen and (max-width: 768px) {=20
  .feature-small:nth-child(3) { clear: left; }
}

.feature::before, .feature::after { content: ' '; display: table; }

.feature::after { clear: both; }

.link-container { padding: 5px 0px 20px; text-align: center; }

footer { padding: 40px 0px; text-align: center; }

::selection { color: rgb(255, 255, 255); background-color: rgb(255, 99, 132=
); }

@-webkit-keyframes fade-in {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

@-webkit-keyframes fade-in-up {=20
  0% { opacity: 0; -webkit-transform: translateY(100px) rotate3d(0, 0, 1, 8=
deg); transform: translateY(100px) rotate3d(0, 0, 1, 8deg); }
  100% { opacity: 1; -webkit-transform: none; transform: none; }
}

.fade-in, .fade-in-up { -webkit-animation-fill-mode: forwards; -webkit-anim=
ation-duration: 1000ms; -webkit-animation-timing-function: ease-in-out; }

.cssanimations .fade-in, .cssanimations .fade-in-up { opacity: 0; }

.fade-in { -webkit-animation-name: fade-in; }

.fade-in-up { -webkit-animation-name: fade-in-up; }

.animation-delay__1 { -webkit-animation-delay: 100ms; }

.animation-delay__2 { -webkit-animation-delay: 200ms; }

.animation-delay__3 { -webkit-animation-delay: 300ms; }

.animation-delay__4 { -webkit-animation-delay: 400ms; }

.animation-delay__5 { -webkit-animation-delay: 500ms; }

.animation-delay__6 { -webkit-animation-delay: 600ms; }

.animation-delay__7 { -webkit-animation-delay: 700ms; }

.animation-delay__8 { -webkit-animation-delay: 800ms; }

.animation-delay__9 { -webkit-animation-delay: 900ms; }

.animation-delay__10 { -webkit-animation-delay: 1000ms; }

.hljs-comment, .hljs-quote { color: rgb(173, 180, 193); }

.hljs-variable, .hljs-template-variable, .hljs-tag, .hljs-name, .hljs-selec=
tor-id, .hljs-selector-class, .hljs-regexp, .hljs-deletion { color: rgb(255=
, 99, 132); }

.hljs-number, .hljs-built_in, .hljs-builtin-name, .hljs-literal, .hljs-type=
, .hljs-params, .hljs-meta, .hljs-link { color: rgb(255, 142, 114); }

.hljs-attribute { color: rgb(188, 133, 0); }

.hljs-string, .hljs-symbol, .hljs-bullet, .hljs-addition { color: rgb(69, 1=
83, 205); }

.hljs-title, .hljs-section { color: rgb(54, 162, 235); }

.hljs-keyword, .hljs-selector-tag { color: rgb(175, 124, 173); }

.hljs { display: block; overflow-x: auto; color: rgb(234, 234, 234); paddin=
g: 0.5em; background: black; }

.hljs-emphasis { font-style: italic; }

.hljs-strong { font-weight: bold; }
------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.chartjs.org/img/chartjs-logo.svg

<svg width=3D"160" height=3D"160" viewBox=3D"0 0 160 160" xmlns=3D"http://w=
ww.w3.org/2000/svg"><title>Artboard 6</title><g fill=3D"none" fill-rule=3D"=
evenodd"><path d=3D"M144.086 80.568c-21.978.43-17.402 14.346-32.89 17.866C9=
5.46 102.01 92.975 60 77.243 60c-15.733 0-19.216 40.806-38.918 68.823l-.56.=
794L80 154l64.086-37V80.568z" fill=3D"#36A2EB"/><path d=3D"M144.086 79.3C13=
6.726 69.856 131.736 59 121 59c-19 0-14 31-35 31s-23.207-33.346-47-2c-7.58 =
9.988-13.682 21.124-18.475 31.662L80 154l64.086-37V79.3z" fill=3D"#FFCE56"/=
><path d=3D"M15.914 92.143C23.124 72.173 26.237 56 40 56c21 0 26 59 44 53s1=
6-38 44-38c5.33 0 10.772 3.263 16.086 8.546V117L80 154l-64.086-37V92.143z" =
fill-opacity=3D".8" fill=3D"#FE6184"/><path stroke=3D"#E7E9ED" stroke-width=
=3D"8" d=3D"M80 6l64.086 37v74L80 154l-64.086-37V43z"/></g></svg>
------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.chartjs.org/img/icon.svg

<?xml version=3D"1.0" encoding=3D"UTF-8" standalone=3D"no"?>
<svg width=3D"60px" height=3D"60px" viewBox=3D"0 0 60 60" version=3D"1.1" x=
mlns=3D"http://www.w3.org/2000/svg" xmlns:xlink=3D"http://www.w3.org/1999/x=
link">
    <!-- Generator: Sketch 3.6.1 (26313) - http://www.bohemiancoding.com/sk=
etch -->
    <title>Footer</title>
    <desc>Created with Sketch.</desc>
    <defs>
        <polygon id=3D"path-1" points=3D"23 0.5 45.9496732 13.75 45.9496732=
 40.25 23 53.5 0.0503267997 40.25 0.0503267997 13.75 "></polygon>
    </defs>
    <g id=3D"Page-1" stroke=3D"none" stroke-width=3D"1" fill=3D"none" fill-=
rule=3D"evenodd">
        <g id=3D"Desktop-HD" transform=3D"translate(-688.000000, -1752.0000=
00)">
            <g id=3D"Footer" transform=3D"translate(335.000000, 1752.000000=
)">
                <g id=3D"Icon" transform=3D"translate(360.000000, 3.000000)=
">
                    <g id=3D"Group-5">
                        <mask id=3D"mask-2" fill=3D"white">
                            <use xlink:href=3D"#path-1"></use>
                        </mask>
                        <use id=3D"Polygon-5" xlink:href=3D"#path-1"></use>
                        <g id=3D"Path-Copy" mask=3D"url(#mask-2)">
                            <g transform=3D"translate(-19.000000, 20.635753=
)" id=3D"Mask">
                                <path d=3D"M26.6025901,25.775863 C33.849244=
1,15.8590287 35.1305976,1.41580873 40.9174598,1.41580873 C46.704322,1.41580=
873 47.6180371,16.2849328 53.4048994,15.0194754 C59.1917616,13.754018 57.36=
43314,8.69218858 65.8923389,8.69218858 C74.4203464,8.69218858 83.862069,37.=
1649793 83.862069,37.1649793 L16.5517241,37.1649793 C16.5517241,37.1649793 =
19.3559361,35.6926973 26.6025901,25.775863 Z" fill=3D"#E6E9EE"></path>
                                <path d=3D"M26.8505747,11.3264699 C35.60199=
84,0.2313979 36.4137931,12.0343743 44.137931,12.0343743 C51.862069,12.03437=
43 50.0229885,1.06185659 57.0114943,1.06185658 C64,1.06185657 64.3678161,13=
.0962308 74.6666667,13.0962308 C84.9655172,13.0962308 96,37.5189315 96,37.5=
189315 L14.7126437,37.5189315 C14.7126437,37.5189315 18.099151,22.4215419 2=
6.8505747,11.3264699 Z" fill=3D"#F3F5FA"></path>
                                <path d=3D"M12.137931,24.4227007 C20.889354=
8,13.3276287 19.4942529,0 27.2183908,0 C34.9425287,0 36.7816092,20.8831788 =
43.4022989,18.7594657 C50.0229885,16.6357526 49.2873563,5.30928275 59.58620=
69,5.30928275 C69.8850575,5.30928275 81.2873563,37.1649793 81.2873563,37.16=
49793 L-2.61349052e-15,37.1649793 C-2.61349052e-15,37.1649793 3.38650731,35=
.5177727 12.137931,24.4227007 Z" fill-opacity=3D"0.8" fill=3D"#D5D7DC"></pa=
th>
                            </g>
                        </g>
                    </g>
                    <polygon id=3D"Polygon-5" stroke=3D"#E7E9ED" stroke-wid=
th=3D"3" points=3D"23 0.5 45.9496732 13.75 45.9496732 40.25 23 53.5 0.05032=
67997 40.25 0.0503267997 13.75 "></polygon>
                </g>
            </g>
        </g>
    </g>
</svg>
------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/1

<html><head><meta charset=3D"GBK"></head><body></body></html>
------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/0

<html><head><meta charset=3D"GBK"></head><body></body></html>
------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/2

<html><head><meta charset=3D"GBK"></head><body></body></html>
------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/3

<html><head><meta charset=3D"GBK"></head><body></body></html>
------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/4

<html><head><meta charset=3D"GBK"></head><body></body></html>
------=_NextPart_000_A5D4_DD21373C.1D322944
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable
Content-Location: wyciwyg://frame/5

<html><head><meta charset=3D"GBK"></head><body></body></html>
------=_NextPart_000_A5D4_DD21373C.1D322944--
